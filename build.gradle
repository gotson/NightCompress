plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'org.jreleaser' version '1.9.0'
    id 'com.github.ben-manes.versions' version '0.50.0'
    id 'me.champeau.mrjar' version '0.1.1'
}

group = 'com.github.gotson.nightcompress'

// Versions
def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def unstableKeyword = ['ALPHA', 'RC'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    def isStable = stableKeyword || version ==~ regex
    return unstableKeyword || !isStable
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
    gradleReleaseChannel = 'current'
    checkConstraints = true
}


// Dependencies
repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.36'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'
}

tasks.withType(Test) {
    useJUnitPlatform()
}


// MR jar
multiRelease {
    targetVersions 8, 21
}

compileJava21Java {
    options.compilerArgs += ["--enable-preview"]
}

compileJava21TestJava {
    options.compilerArgs += ["--enable-preview"]
}

java21Test {
    jvmArgs += ["--enable-preview", "--enable-native-access=ALL-UNNAMED"]
}

configurations {
    java21Implementation.extendsFrom(implementation)
}

def noLibTestTask = tasks.register('noLibTest', Test) {
    description = 'Runs tests without lib'
    group = 'verification'

    classpath = files(jar.archiveFile.get().asFile) +
            configurations[sourceSets.java21.runtimeClasspathConfigurationName] +
            configurations[sourceSets.test.runtimeClasspathConfigurationName] +
            sourceSets.test.output
    testClassesDirs = sourceSets.test.output.classesDirs

    jvmArgs += ["--enable-preview", "--enable-native-access=ALL-UNNAMED"]
    systemProperty "java.library.path", ''
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(21)
    }

    dependsOn jar
}

tasks.named('check') {
    dependsOn(noLibTestTask)
}


// Maven publishing
nexusPublishing {
    repositories {
        sonatype()
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        attributes(
                'Implementation-Version': "$project.version",
                'Implementation-Vendor': "NightCompress"
        )
    }
}

publishing {
    repositories {
        mavenLocal()
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = project.name
                description = 'NightCompress'
                url = 'https://github.com/gotson/NightCompress'
                inceptionYear = '2023'

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/gotson/NightCompress/blob/main/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'gotson'
                        name = 'Gauthier Roebroeck'
                    }
                }
                scm {
                    url = 'https://github.com/gotson/NightCompress.git'
                }
            }
        }
    }
}

signing {
    required { false }
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}


// JReleaser
jreleaser {
    project {
        description = 'NightCompress'
        copyright = 'Gauthier Roebroeck'
    }
    release {
        github {
            discussionCategoryName = 'Announcements'

            changelog {
                formatted = 'ALWAYS'
                preset = 'conventional-commits'
                skipMergeCommits = true
                links = true
                format = '- {{#commitIsConventional}}{{#conventionalCommitIsBreakingChange}}üö® {{/conventionalCommitIsBreakingChange}}{{#conventionalCommitScope}}**{{conventionalCommitScope}}**: {{/conventionalCommitScope}}{{conventionalCommitDescription}}{{#conventionalCommitBreakingChangeContent}}: *{{conventionalCommitBreakingChangeContent}}*{{/conventionalCommitBreakingChangeContent}} ({{commitShortHash}}){{/commitIsConventional}}{{^commitIsConventional}}{{commitTitle}} ({{commitShortHash}}){{/commitIsConventional}}{{#commitHasIssues}}, closes{{#commitIssues}} {{issue}}{{/commitIssues}}{{/commitHasIssues}}'
                contributors {
                    enabled = false
                }
                hide {
                    uncategorized = true
                    contributors = ['[bot]', 'github-actions', 'GitHub']
                }
                excludeLabels = ['chore']
                category {
                    title = 'üèé Perf'
                    key = 'perf'
                    labels = ['perf']
                    order = 25
                }
                labeler {
                    label = 'perf'
                    title = 'regex:^(?:perf(?:\\(.*\\))?!?):\\s.*'
                    order = 120
                }
                extraProperties.put('categorizeScopes', true)
            }

            issues {
                enabled = true
                comment = 'üéâ This issue has been resolved in `{{tagName}}` ([Release Notes]({{releaseNotesUrl}}))'
                applyMilestone = 'ALWAYS'
                label {
                    name = 'released'
                    description = 'Issue has been released'
                    color = '#ededed'
                }
            }
        }
    }
}

wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.ALL
}