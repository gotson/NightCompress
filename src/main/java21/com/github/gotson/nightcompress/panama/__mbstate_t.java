// Generated by jextract

package com.github.gotson.nightcompress.panama;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * union {
 *     char __mbstate8[128];
 *     long long _mbstateL;
 * };
 * }
 */
public class __mbstate_t {

    public static MemoryLayout $LAYOUT() {
        return constants$0.const$0;
    }
    public static MemorySegment __mbstate8$slice(MemorySegment seg) {
        return seg.asSlice(0, 128);
    }
    public static VarHandle _mbstateL$VH() {
        return constants$0.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long _mbstateL;
     * }
     */
    public static long _mbstateL$get(MemorySegment seg) {
        return (long)constants$0.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long _mbstateL;
     * }
     */
    public static void _mbstateL$set(MemorySegment seg, long x) {
        constants$0.const$1.set(seg, x);
    }
    public static long _mbstateL$get(MemorySegment seg, long index) {
        return (long)constants$0.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _mbstateL$set(MemorySegment seg, long index, long x) {
        constants$0.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


