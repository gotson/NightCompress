// Generated by jextract

package com.github.gotson.nightcompress.panama;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class archive_h extends archive_h_2 {

    public static final OfByte C_CHAR = JAVA_BYTE;
    public static final OfShort C_SHORT = JAVA_SHORT;
    public static final OfInt C_INT = JAVA_INT;
    public static final OfLong C_LONG = JAVA_LONG;
    public static final OfLong C_LONG_LONG = JAVA_LONG;
    public static final OfFloat C_FLOAT = JAVA_FLOAT;
    public static final OfDouble C_DOUBLE = JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * #define ARCHIVE_VERSION_NUMBER 3005000
     * }
     */
    public static int ARCHIVE_VERSION_NUMBER() {
        return (int)3005000L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_64_BIT_INO_T 0
     * }
     */
    public static int __DARWIN_ONLY_64_BIT_INO_T() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int __DARWIN_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_ONLY_VERS_1050 0
     * }
     */
    public static int __DARWIN_ONLY_VERS_1050() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_UNIX03 1
     * }
     */
    public static int __DARWIN_UNIX03() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_64_BIT_INO_T 1
     * }
     */
    public static int __DARWIN_64_BIT_INO_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_VERS_1050 1
     * }
     */
    public static int __DARWIN_VERS_1050() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NON_CANCELABLE 0
     * }
     */
    public static int __DARWIN_NON_CANCELABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __STDC_WANT_LIB_EXT1__ 1
     * }
     */
    public static int __STDC_WANT_LIB_EXT1__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NO_LONG_LONG 0
     * }
     */
    public static int __DARWIN_NO_LONG_LONG() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_64_BIT_INODE 1
     * }
     */
    public static int _DARWIN_FEATURE_64_BIT_INODE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE 1
     * }
     */
    public static int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DARWIN_FEATURE_UNIX_CONFORMANCE 3
     * }
     */
    public static int _DARWIN_FEATURE_UNIX_CONFORMANCE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define __has_ptrcheck 0
     * }
     */
    public static int __has_ptrcheck() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_SIZE__ 8176
     * }
     */
    public static int __PTHREAD_SIZE__() {
        return (int)8176L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_ATTR_SIZE__ 56
     * }
     */
    public static int __PTHREAD_ATTR_SIZE__() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEXATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_MUTEXATTR_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_SIZE__ 56
     * }
     */
    public static int __PTHREAD_MUTEX_SIZE__() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_CONDATTR_SIZE__ 8
     * }
     */
    public static int __PTHREAD_CONDATTR_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_COND_SIZE__ 40
     * }
     */
    public static int __PTHREAD_COND_SIZE__() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_ONCE_SIZE__ 8
     * }
     */
    public static int __PTHREAD_ONCE_SIZE__() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_SIZE__ 192
     * }
     */
    public static int __PTHREAD_RWLOCK_SIZE__() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCKATTR_SIZE__ 16
     * }
     */
    public static int __PTHREAD_RWLOCKATTR_SIZE__() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_MACOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACOS() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_IOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_IOS() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_MACCATALYST 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_MACCATALYST() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_WATCHOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_WATCHOS() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_TVOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_TVOS() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_DRIVERKIT 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_DRIVERKIT() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __API_TO_BE_DEPRECATED_VISIONOS 100000
     * }
     */
    public static int __API_TO_BE_DEPRECATED_VISIONOS() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_0 1000
     * }
     */
    public static int __MAC_10_0() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_1 1010
     * }
     */
    public static int __MAC_10_1() {
        return (int)1010L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_2 1020
     * }
     */
    public static int __MAC_10_2() {
        return (int)1020L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_3 1030
     * }
     */
    public static int __MAC_10_3() {
        return (int)1030L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_4 1040
     * }
     */
    public static int __MAC_10_4() {
        return (int)1040L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_5 1050
     * }
     */
    public static int __MAC_10_5() {
        return (int)1050L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_6 1060
     * }
     */
    public static int __MAC_10_6() {
        return (int)1060L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_7 1070
     * }
     */
    public static int __MAC_10_7() {
        return (int)1070L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_8 1080
     * }
     */
    public static int __MAC_10_8() {
        return (int)1080L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_9 1090
     * }
     */
    public static int __MAC_10_9() {
        return (int)1090L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_10 101000
     * }
     */
    public static int __MAC_10_10() {
        return (int)101000L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_10_2 101002
     * }
     */
    public static int __MAC_10_10_2() {
        return (int)101002L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_10_3 101003
     * }
     */
    public static int __MAC_10_10_3() {
        return (int)101003L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_11 101100
     * }
     */
    public static int __MAC_10_11() {
        return (int)101100L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_11_2 101102
     * }
     */
    public static int __MAC_10_11_2() {
        return (int)101102L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_11_3 101103
     * }
     */
    public static int __MAC_10_11_3() {
        return (int)101103L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_11_4 101104
     * }
     */
    public static int __MAC_10_11_4() {
        return (int)101104L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_12 101200
     * }
     */
    public static int __MAC_10_12() {
        return (int)101200L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_12_1 101201
     * }
     */
    public static int __MAC_10_12_1() {
        return (int)101201L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_12_2 101202
     * }
     */
    public static int __MAC_10_12_2() {
        return (int)101202L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_12_4 101204
     * }
     */
    public static int __MAC_10_12_4() {
        return (int)101204L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_13 101300
     * }
     */
    public static int __MAC_10_13() {
        return (int)101300L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_13_1 101301
     * }
     */
    public static int __MAC_10_13_1() {
        return (int)101301L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_13_2 101302
     * }
     */
    public static int __MAC_10_13_2() {
        return (int)101302L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_13_4 101304
     * }
     */
    public static int __MAC_10_13_4() {
        return (int)101304L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_14 101400
     * }
     */
    public static int __MAC_10_14() {
        return (int)101400L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_14_1 101401
     * }
     */
    public static int __MAC_10_14_1() {
        return (int)101401L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_14_4 101404
     * }
     */
    public static int __MAC_10_14_4() {
        return (int)101404L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_14_5 101405
     * }
     */
    public static int __MAC_10_14_5() {
        return (int)101405L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_14_6 101406
     * }
     */
    public static int __MAC_10_14_6() {
        return (int)101406L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_15 101500
     * }
     */
    public static int __MAC_10_15() {
        return (int)101500L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_15_1 101501
     * }
     */
    public static int __MAC_10_15_1() {
        return (int)101501L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_15_4 101504
     * }
     */
    public static int __MAC_10_15_4() {
        return (int)101504L;
    }
    /**
     * {@snippet :
     * #define __MAC_10_16 101600
     * }
     */
    public static int __MAC_10_16() {
        return (int)101600L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_0 110000
     * }
     */
    public static int __MAC_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_1 110100
     * }
     */
    public static int __MAC_11_1() {
        return (int)110100L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_3 110300
     * }
     */
    public static int __MAC_11_3() {
        return (int)110300L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_4 110400
     * }
     */
    public static int __MAC_11_4() {
        return (int)110400L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_5 110500
     * }
     */
    public static int __MAC_11_5() {
        return (int)110500L;
    }
    /**
     * {@snippet :
     * #define __MAC_11_6 110600
     * }
     */
    public static int __MAC_11_6() {
        return (int)110600L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_0 120000
     * }
     */
    public static int __MAC_12_0() {
        return (int)120000L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_1 120100
     * }
     */
    public static int __MAC_12_1() {
        return (int)120100L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_2 120200
     * }
     */
    public static int __MAC_12_2() {
        return (int)120200L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_3 120300
     * }
     */
    public static int __MAC_12_3() {
        return (int)120300L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_4 120400
     * }
     */
    public static int __MAC_12_4() {
        return (int)120400L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_5 120500
     * }
     */
    public static int __MAC_12_5() {
        return (int)120500L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_6 120600
     * }
     */
    public static int __MAC_12_6() {
        return (int)120600L;
    }
    /**
     * {@snippet :
     * #define __MAC_12_7 120700
     * }
     */
    public static int __MAC_12_7() {
        return (int)120700L;
    }
    /**
     * {@snippet :
     * #define __MAC_13_0 130000
     * }
     */
    public static int __MAC_13_0() {
        return (int)130000L;
    }
    /**
     * {@snippet :
     * #define __MAC_13_1 130100
     * }
     */
    public static int __MAC_13_1() {
        return (int)130100L;
    }
    /**
     * {@snippet :
     * #define __MAC_13_2 130200
     * }
     */
    public static int __MAC_13_2() {
        return (int)130200L;
    }
    /**
     * {@snippet :
     * #define __MAC_13_3 130300
     * }
     */
    public static int __MAC_13_3() {
        return (int)130300L;
    }
    /**
     * {@snippet :
     * #define __MAC_13_4 130400
     * }
     */
    public static int __MAC_13_4() {
        return (int)130400L;
    }
    /**
     * {@snippet :
     * #define __MAC_13_5 130500
     * }
     */
    public static int __MAC_13_5() {
        return (int)130500L;
    }
    /**
     * {@snippet :
     * #define __MAC_13_6 130600
     * }
     */
    public static int __MAC_13_6() {
        return (int)130600L;
    }
    /**
     * {@snippet :
     * #define __MAC_14_0 140000
     * }
     */
    public static int __MAC_14_0() {
        return (int)140000L;
    }
    /**
     * {@snippet :
     * #define __MAC_14_1 140100
     * }
     */
    public static int __MAC_14_1() {
        return (int)140100L;
    }
    /**
     * {@snippet :
     * #define __MAC_14_2 140200
     * }
     */
    public static int __MAC_14_2() {
        return (int)140200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_2_0 20000
     * }
     */
    public static int __IPHONE_2_0() {
        return (int)20000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_2_1 20100
     * }
     */
    public static int __IPHONE_2_1() {
        return (int)20100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_2_2 20200
     * }
     */
    public static int __IPHONE_2_2() {
        return (int)20200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_3_0 30000
     * }
     */
    public static int __IPHONE_3_0() {
        return (int)30000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_3_1 30100
     * }
     */
    public static int __IPHONE_3_1() {
        return (int)30100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_3_2 30200
     * }
     */
    public static int __IPHONE_3_2() {
        return (int)30200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_4_0 40000
     * }
     */
    public static int __IPHONE_4_0() {
        return (int)40000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_4_1 40100
     * }
     */
    public static int __IPHONE_4_1() {
        return (int)40100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_4_2 40200
     * }
     */
    public static int __IPHONE_4_2() {
        return (int)40200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_4_3 40300
     * }
     */
    public static int __IPHONE_4_3() {
        return (int)40300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_5_0 50000
     * }
     */
    public static int __IPHONE_5_0() {
        return (int)50000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_5_1 50100
     * }
     */
    public static int __IPHONE_5_1() {
        return (int)50100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_6_0 60000
     * }
     */
    public static int __IPHONE_6_0() {
        return (int)60000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_6_1 60100
     * }
     */
    public static int __IPHONE_6_1() {
        return (int)60100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_7_0 70000
     * }
     */
    public static int __IPHONE_7_0() {
        return (int)70000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_7_1 70100
     * }
     */
    public static int __IPHONE_7_1() {
        return (int)70100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_8_0 80000
     * }
     */
    public static int __IPHONE_8_0() {
        return (int)80000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_8_1 80100
     * }
     */
    public static int __IPHONE_8_1() {
        return (int)80100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_8_2 80200
     * }
     */
    public static int __IPHONE_8_2() {
        return (int)80200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_8_3 80300
     * }
     */
    public static int __IPHONE_8_3() {
        return (int)80300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_8_4 80400
     * }
     */
    public static int __IPHONE_8_4() {
        return (int)80400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_9_0 90000
     * }
     */
    public static int __IPHONE_9_0() {
        return (int)90000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_9_1 90100
     * }
     */
    public static int __IPHONE_9_1() {
        return (int)90100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_9_2 90200
     * }
     */
    public static int __IPHONE_9_2() {
        return (int)90200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_9_3 90300
     * }
     */
    public static int __IPHONE_9_3() {
        return (int)90300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_10_0 100000
     * }
     */
    public static int __IPHONE_10_0() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_10_1 100100
     * }
     */
    public static int __IPHONE_10_1() {
        return (int)100100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_10_2 100200
     * }
     */
    public static int __IPHONE_10_2() {
        return (int)100200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_10_3 100300
     * }
     */
    public static int __IPHONE_10_3() {
        return (int)100300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_11_0 110000
     * }
     */
    public static int __IPHONE_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_11_1 110100
     * }
     */
    public static int __IPHONE_11_1() {
        return (int)110100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_11_2 110200
     * }
     */
    public static int __IPHONE_11_2() {
        return (int)110200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_11_3 110300
     * }
     */
    public static int __IPHONE_11_3() {
        return (int)110300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_11_4 110400
     * }
     */
    public static int __IPHONE_11_4() {
        return (int)110400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_12_0 120000
     * }
     */
    public static int __IPHONE_12_0() {
        return (int)120000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_12_1 120100
     * }
     */
    public static int __IPHONE_12_1() {
        return (int)120100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_12_2 120200
     * }
     */
    public static int __IPHONE_12_2() {
        return (int)120200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_12_3 120300
     * }
     */
    public static int __IPHONE_12_3() {
        return (int)120300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_12_4 120400
     * }
     */
    public static int __IPHONE_12_4() {
        return (int)120400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_0 130000
     * }
     */
    public static int __IPHONE_13_0() {
        return (int)130000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_1 130100
     * }
     */
    public static int __IPHONE_13_1() {
        return (int)130100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_2 130200
     * }
     */
    public static int __IPHONE_13_2() {
        return (int)130200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_3 130300
     * }
     */
    public static int __IPHONE_13_3() {
        return (int)130300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_4 130400
     * }
     */
    public static int __IPHONE_13_4() {
        return (int)130400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_5 130500
     * }
     */
    public static int __IPHONE_13_5() {
        return (int)130500L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_6 130600
     * }
     */
    public static int __IPHONE_13_6() {
        return (int)130600L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_13_7 130700
     * }
     */
    public static int __IPHONE_13_7() {
        return (int)130700L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_0 140000
     * }
     */
    public static int __IPHONE_14_0() {
        return (int)140000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_1 140100
     * }
     */
    public static int __IPHONE_14_1() {
        return (int)140100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_2 140200
     * }
     */
    public static int __IPHONE_14_2() {
        return (int)140200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_3 140300
     * }
     */
    public static int __IPHONE_14_3() {
        return (int)140300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_5 140500
     * }
     */
    public static int __IPHONE_14_5() {
        return (int)140500L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_4 140400
     * }
     */
    public static int __IPHONE_14_4() {
        return (int)140400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_6 140600
     * }
     */
    public static int __IPHONE_14_6() {
        return (int)140600L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_7 140700
     * }
     */
    public static int __IPHONE_14_7() {
        return (int)140700L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_14_8 140800
     * }
     */
    public static int __IPHONE_14_8() {
        return (int)140800L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_0 150000
     * }
     */
    public static int __IPHONE_15_0() {
        return (int)150000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_1 150100
     * }
     */
    public static int __IPHONE_15_1() {
        return (int)150100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_2 150200
     * }
     */
    public static int __IPHONE_15_2() {
        return (int)150200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_3 150300
     * }
     */
    public static int __IPHONE_15_3() {
        return (int)150300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_4 150400
     * }
     */
    public static int __IPHONE_15_4() {
        return (int)150400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_5 150500
     * }
     */
    public static int __IPHONE_15_5() {
        return (int)150500L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_15_6 150600
     * }
     */
    public static int __IPHONE_15_6() {
        return (int)150600L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_0 160000
     * }
     */
    public static int __IPHONE_16_0() {
        return (int)160000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_1 160100
     * }
     */
    public static int __IPHONE_16_1() {
        return (int)160100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_2 160200
     * }
     */
    public static int __IPHONE_16_2() {
        return (int)160200L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_3 160300
     * }
     */
    public static int __IPHONE_16_3() {
        return (int)160300L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_4 160400
     * }
     */
    public static int __IPHONE_16_4() {
        return (int)160400L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_5 160500
     * }
     */
    public static int __IPHONE_16_5() {
        return (int)160500L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_6 160600
     * }
     */
    public static int __IPHONE_16_6() {
        return (int)160600L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_16_7 160700
     * }
     */
    public static int __IPHONE_16_7() {
        return (int)160700L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_17_0 170000
     * }
     */
    public static int __IPHONE_17_0() {
        return (int)170000L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_17_1 170100
     * }
     */
    public static int __IPHONE_17_1() {
        return (int)170100L;
    }
    /**
     * {@snippet :
     * #define __IPHONE_17_2 170200
     * }
     */
    public static int __IPHONE_17_2() {
        return (int)170200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_1_0 10000
     * }
     */
    public static int __WATCHOS_1_0() {
        return (int)10000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_2_0 20000
     * }
     */
    public static int __WATCHOS_2_0() {
        return (int)20000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_2_1 20100
     * }
     */
    public static int __WATCHOS_2_1() {
        return (int)20100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_2_2 20200
     * }
     */
    public static int __WATCHOS_2_2() {
        return (int)20200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_3_0 30000
     * }
     */
    public static int __WATCHOS_3_0() {
        return (int)30000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_3_1 30100
     * }
     */
    public static int __WATCHOS_3_1() {
        return (int)30100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_3_1_1 30101
     * }
     */
    public static int __WATCHOS_3_1_1() {
        return (int)30101L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_3_2 30200
     * }
     */
    public static int __WATCHOS_3_2() {
        return (int)30200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_4_0 40000
     * }
     */
    public static int __WATCHOS_4_0() {
        return (int)40000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_4_1 40100
     * }
     */
    public static int __WATCHOS_4_1() {
        return (int)40100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_4_2 40200
     * }
     */
    public static int __WATCHOS_4_2() {
        return (int)40200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_4_3 40300
     * }
     */
    public static int __WATCHOS_4_3() {
        return (int)40300L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_5_0 50000
     * }
     */
    public static int __WATCHOS_5_0() {
        return (int)50000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_5_1 50100
     * }
     */
    public static int __WATCHOS_5_1() {
        return (int)50100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_5_2 50200
     * }
     */
    public static int __WATCHOS_5_2() {
        return (int)50200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_5_3 50300
     * }
     */
    public static int __WATCHOS_5_3() {
        return (int)50300L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_6_0 60000
     * }
     */
    public static int __WATCHOS_6_0() {
        return (int)60000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_6_1 60100
     * }
     */
    public static int __WATCHOS_6_1() {
        return (int)60100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_6_2 60200
     * }
     */
    public static int __WATCHOS_6_2() {
        return (int)60200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_0 70000
     * }
     */
    public static int __WATCHOS_7_0() {
        return (int)70000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_1 70100
     * }
     */
    public static int __WATCHOS_7_1() {
        return (int)70100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_2 70200
     * }
     */
    public static int __WATCHOS_7_2() {
        return (int)70200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_3 70300
     * }
     */
    public static int __WATCHOS_7_3() {
        return (int)70300L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_4 70400
     * }
     */
    public static int __WATCHOS_7_4() {
        return (int)70400L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_5 70500
     * }
     */
    public static int __WATCHOS_7_5() {
        return (int)70500L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_7_6 70600
     * }
     */
    public static int __WATCHOS_7_6() {
        return (int)70600L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_0 80000
     * }
     */
    public static int __WATCHOS_8_0() {
        return (int)80000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_1 80100
     * }
     */
    public static int __WATCHOS_8_1() {
        return (int)80100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_3 80300
     * }
     */
    public static int __WATCHOS_8_3() {
        return (int)80300L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_4 80400
     * }
     */
    public static int __WATCHOS_8_4() {
        return (int)80400L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_5 80500
     * }
     */
    public static int __WATCHOS_8_5() {
        return (int)80500L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_6 80600
     * }
     */
    public static int __WATCHOS_8_6() {
        return (int)80600L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_8_7 80700
     * }
     */
    public static int __WATCHOS_8_7() {
        return (int)80700L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_0 90000
     * }
     */
    public static int __WATCHOS_9_0() {
        return (int)90000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_1 90100
     * }
     */
    public static int __WATCHOS_9_1() {
        return (int)90100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_2 90200
     * }
     */
    public static int __WATCHOS_9_2() {
        return (int)90200L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_3 90300
     * }
     */
    public static int __WATCHOS_9_3() {
        return (int)90300L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_4 90400
     * }
     */
    public static int __WATCHOS_9_4() {
        return (int)90400L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_5 90500
     * }
     */
    public static int __WATCHOS_9_5() {
        return (int)90500L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_9_6 90600
     * }
     */
    public static int __WATCHOS_9_6() {
        return (int)90600L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_10_0 100000
     * }
     */
    public static int __WATCHOS_10_0() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_10_1 100100
     * }
     */
    public static int __WATCHOS_10_1() {
        return (int)100100L;
    }
    /**
     * {@snippet :
     * #define __WATCHOS_10_2 100200
     * }
     */
    public static int __WATCHOS_10_2() {
        return (int)100200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_9_0 90000
     * }
     */
    public static int __TVOS_9_0() {
        return (int)90000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_9_1 90100
     * }
     */
    public static int __TVOS_9_1() {
        return (int)90100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_9_2 90200
     * }
     */
    public static int __TVOS_9_2() {
        return (int)90200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_10_0 100000
     * }
     */
    public static int __TVOS_10_0() {
        return (int)100000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_10_0_1 100001
     * }
     */
    public static int __TVOS_10_0_1() {
        return (int)100001L;
    }
    /**
     * {@snippet :
     * #define __TVOS_10_1 100100
     * }
     */
    public static int __TVOS_10_1() {
        return (int)100100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_10_2 100200
     * }
     */
    public static int __TVOS_10_2() {
        return (int)100200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_11_0 110000
     * }
     */
    public static int __TVOS_11_0() {
        return (int)110000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_11_1 110100
     * }
     */
    public static int __TVOS_11_1() {
        return (int)110100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_11_2 110200
     * }
     */
    public static int __TVOS_11_2() {
        return (int)110200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_11_3 110300
     * }
     */
    public static int __TVOS_11_3() {
        return (int)110300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_11_4 110400
     * }
     */
    public static int __TVOS_11_4() {
        return (int)110400L;
    }
    /**
     * {@snippet :
     * #define __TVOS_12_0 120000
     * }
     */
    public static int __TVOS_12_0() {
        return (int)120000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_12_1 120100
     * }
     */
    public static int __TVOS_12_1() {
        return (int)120100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_12_2 120200
     * }
     */
    public static int __TVOS_12_2() {
        return (int)120200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_12_3 120300
     * }
     */
    public static int __TVOS_12_3() {
        return (int)120300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_12_4 120400
     * }
     */
    public static int __TVOS_12_4() {
        return (int)120400L;
    }
    /**
     * {@snippet :
     * #define __TVOS_13_0 130000
     * }
     */
    public static int __TVOS_13_0() {
        return (int)130000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_13_2 130200
     * }
     */
    public static int __TVOS_13_2() {
        return (int)130200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_13_3 130300
     * }
     */
    public static int __TVOS_13_3() {
        return (int)130300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_13_4 130400
     * }
     */
    public static int __TVOS_13_4() {
        return (int)130400L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_0 140000
     * }
     */
    public static int __TVOS_14_0() {
        return (int)140000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_1 140100
     * }
     */
    public static int __TVOS_14_1() {
        return (int)140100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_2 140200
     * }
     */
    public static int __TVOS_14_2() {
        return (int)140200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_3 140300
     * }
     */
    public static int __TVOS_14_3() {
        return (int)140300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_5 140500
     * }
     */
    public static int __TVOS_14_5() {
        return (int)140500L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_6 140600
     * }
     */
    public static int __TVOS_14_6() {
        return (int)140600L;
    }
    /**
     * {@snippet :
     * #define __TVOS_14_7 140700
     * }
     */
    public static int __TVOS_14_7() {
        return (int)140700L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_0 150000
     * }
     */
    public static int __TVOS_15_0() {
        return (int)150000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_1 150100
     * }
     */
    public static int __TVOS_15_1() {
        return (int)150100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_2 150200
     * }
     */
    public static int __TVOS_15_2() {
        return (int)150200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_3 150300
     * }
     */
    public static int __TVOS_15_3() {
        return (int)150300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_4 150400
     * }
     */
    public static int __TVOS_15_4() {
        return (int)150400L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_5 150500
     * }
     */
    public static int __TVOS_15_5() {
        return (int)150500L;
    }
    /**
     * {@snippet :
     * #define __TVOS_15_6 150600
     * }
     */
    public static int __TVOS_15_6() {
        return (int)150600L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_0 160000
     * }
     */
    public static int __TVOS_16_0() {
        return (int)160000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_1 160100
     * }
     */
    public static int __TVOS_16_1() {
        return (int)160100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_2 160200
     * }
     */
    public static int __TVOS_16_2() {
        return (int)160200L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_3 160300
     * }
     */
    public static int __TVOS_16_3() {
        return (int)160300L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_4 160400
     * }
     */
    public static int __TVOS_16_4() {
        return (int)160400L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_5 160500
     * }
     */
    public static int __TVOS_16_5() {
        return (int)160500L;
    }
    /**
     * {@snippet :
     * #define __TVOS_16_6 160600
     * }
     */
    public static int __TVOS_16_6() {
        return (int)160600L;
    }
    /**
     * {@snippet :
     * #define __TVOS_17_0 170000
     * }
     */
    public static int __TVOS_17_0() {
        return (int)170000L;
    }
    /**
     * {@snippet :
     * #define __TVOS_17_1 170100
     * }
     */
    public static int __TVOS_17_1() {
        return (int)170100L;
    }
    /**
     * {@snippet :
     * #define __TVOS_17_2 170200
     * }
     */
    public static int __TVOS_17_2() {
        return (int)170200L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_2_0 20000
     * }
     */
    public static int __BRIDGEOS_2_0() {
        return (int)20000L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_3_0 30000
     * }
     */
    public static int __BRIDGEOS_3_0() {
        return (int)30000L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_3_1 30100
     * }
     */
    public static int __BRIDGEOS_3_1() {
        return (int)30100L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_3_4 30400
     * }
     */
    public static int __BRIDGEOS_3_4() {
        return (int)30400L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_4_0 40000
     * }
     */
    public static int __BRIDGEOS_4_0() {
        return (int)40000L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_4_1 40100
     * }
     */
    public static int __BRIDGEOS_4_1() {
        return (int)40100L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_5_0 50000
     * }
     */
    public static int __BRIDGEOS_5_0() {
        return (int)50000L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_5_1 50100
     * }
     */
    public static int __BRIDGEOS_5_1() {
        return (int)50100L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_5_3 50300
     * }
     */
    public static int __BRIDGEOS_5_3() {
        return (int)50300L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_6_0 60000
     * }
     */
    public static int __BRIDGEOS_6_0() {
        return (int)60000L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_6_2 60200
     * }
     */
    public static int __BRIDGEOS_6_2() {
        return (int)60200L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_6_4 60400
     * }
     */
    public static int __BRIDGEOS_6_4() {
        return (int)60400L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_6_5 60500
     * }
     */
    public static int __BRIDGEOS_6_5() {
        return (int)60500L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_6_6 60600
     * }
     */
    public static int __BRIDGEOS_6_6() {
        return (int)60600L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_7_0 70000
     * }
     */
    public static int __BRIDGEOS_7_0() {
        return (int)70000L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_7_1 70100
     * }
     */
    public static int __BRIDGEOS_7_1() {
        return (int)70100L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_7_2 70200
     * }
     */
    public static int __BRIDGEOS_7_2() {
        return (int)70200L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_7_3 70300
     * }
     */
    public static int __BRIDGEOS_7_3() {
        return (int)70300L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_7_4 70400
     * }
     */
    public static int __BRIDGEOS_7_4() {
        return (int)70400L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_7_6 70600
     * }
     */
    public static int __BRIDGEOS_7_6() {
        return (int)70600L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_8_0 80000
     * }
     */
    public static int __BRIDGEOS_8_0() {
        return (int)80000L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_8_1 80100
     * }
     */
    public static int __BRIDGEOS_8_1() {
        return (int)80100L;
    }
    /**
     * {@snippet :
     * #define __BRIDGEOS_8_2 80200
     * }
     */
    public static int __BRIDGEOS_8_2() {
        return (int)80200L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_19_0 190000
     * }
     */
    public static int __DRIVERKIT_19_0() {
        return (int)190000L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_20_0 200000
     * }
     */
    public static int __DRIVERKIT_20_0() {
        return (int)200000L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_21_0 210000
     * }
     */
    public static int __DRIVERKIT_21_0() {
        return (int)210000L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_22_0 220000
     * }
     */
    public static int __DRIVERKIT_22_0() {
        return (int)220000L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_22_4 220400
     * }
     */
    public static int __DRIVERKIT_22_4() {
        return (int)220400L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_22_5 220500
     * }
     */
    public static int __DRIVERKIT_22_5() {
        return (int)220500L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_22_6 220600
     * }
     */
    public static int __DRIVERKIT_22_6() {
        return (int)220600L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_23_0 230000
     * }
     */
    public static int __DRIVERKIT_23_0() {
        return (int)230000L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_23_1 230100
     * }
     */
    public static int __DRIVERKIT_23_1() {
        return (int)230100L;
    }
    /**
     * {@snippet :
     * #define __DRIVERKIT_23_2 230200
     * }
     */
    public static int __DRIVERKIT_23_2() {
        return (int)230200L;
    }
    /**
     * {@snippet :
     * #define __VISIONOS_1_0 10000
     * }
     */
    public static int __VISIONOS_1_0() {
        return (int)10000L;
    }
    /**
     * {@snippet :
     * #define __ENABLE_LEGACY_MAC_AVAILABILITY 1
     * }
     */
    public static int __ENABLE_LEGACY_MAC_AVAILABILITY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define S_IFMT 61440
     * }
     */
    public static int S_IFMT() {
        return (int)61440L;
    }
    /**
     * {@snippet :
     * #define S_IFIFO 4096
     * }
     */
    public static int S_IFIFO() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define S_IFCHR 8192
     * }
     */
    public static int S_IFCHR() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define S_IFDIR 16384
     * }
     */
    public static int S_IFDIR() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define S_IFBLK 24576
     * }
     */
    public static int S_IFBLK() {
        return (int)24576L;
    }
    /**
     * {@snippet :
     * #define S_IFREG 32768
     * }
     */
    public static int S_IFREG() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define S_IFLNK 40960
     * }
     */
    public static int S_IFLNK() {
        return (int)40960L;
    }
    /**
     * {@snippet :
     * #define S_IFSOCK 49152
     * }
     */
    public static int S_IFSOCK() {
        return (int)49152L;
    }
    /**
     * {@snippet :
     * #define S_IFWHT 57344
     * }
     */
    public static int S_IFWHT() {
        return (int)57344L;
    }
    /**
     * {@snippet :
     * #define S_IRWXU 448
     * }
     */
    public static int S_IRWXU() {
        return (int)448L;
    }
    /**
     * {@snippet :
     * #define S_IRUSR 256
     * }
     */
    public static int S_IRUSR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define S_IWUSR 128
     * }
     */
    public static int S_IWUSR() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define S_IXUSR 64
     * }
     */
    public static int S_IXUSR() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define S_IRWXG 56
     * }
     */
    public static int S_IRWXG() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define S_IRGRP 32
     * }
     */
    public static int S_IRGRP() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define S_IWGRP 16
     * }
     */
    public static int S_IWGRP() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define S_IXGRP 8
     * }
     */
    public static int S_IXGRP() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define S_IRWXO 7
     * }
     */
    public static int S_IRWXO() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define S_IROTH 4
     * }
     */
    public static int S_IROTH() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define S_IWOTH 2
     * }
     */
    public static int S_IWOTH() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define S_IXOTH 1
     * }
     */
    public static int S_IXOTH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define S_ISUID 2048
     * }
     */
    public static int S_ISUID() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define S_ISGID 1024
     * }
     */
    public static int S_ISGID() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define S_ISVTX 512
     * }
     */
    public static int S_ISVTX() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define S_BLKSIZE 512
     * }
     */
    public static int S_BLKSIZE() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define UF_SETTABLE 65535
     * }
     */
    public static int UF_SETTABLE() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UF_NODUMP 1
     * }
     */
    public static int UF_NODUMP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define UF_IMMUTABLE 2
     * }
     */
    public static int UF_IMMUTABLE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define UF_APPEND 4
     * }
     */
    public static int UF_APPEND() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define UF_OPAQUE 8
     * }
     */
    public static int UF_OPAQUE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define UF_COMPRESSED 32
     * }
     */
    public static int UF_COMPRESSED() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define UF_TRACKED 64
     * }
     */
    public static int UF_TRACKED() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define UF_DATAVAULT 128
     * }
     */
    public static int UF_DATAVAULT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define UF_HIDDEN 32768
     * }
     */
    public static int UF_HIDDEN() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define SF_SUPPORTED 10420224
     * }
     */
    public static int SF_SUPPORTED() {
        return (int)10420224L;
    }
    /**
     * {@snippet :
     * #define SF_SETTABLE 1073676288
     * }
     */
    public static int SF_SETTABLE() {
        return (int)1073676288L;
    }
    /**
     * {@snippet :
     * #define SF_ARCHIVED 65536
     * }
     */
    public static int SF_ARCHIVED() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define SF_IMMUTABLE 131072
     * }
     */
    public static int SF_IMMUTABLE() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define SF_APPEND 262144
     * }
     */
    public static int SF_APPEND() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * #define SF_RESTRICTED 524288
     * }
     */
    public static int SF_RESTRICTED() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * #define SF_NOUNLINK 1048576
     * }
     */
    public static int SF_NOUNLINK() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * #define SF_FIRMLINK 8388608
     * }
     */
    public static int SF_FIRMLINK() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * #define SF_DATALESS 1073741824
     * }
     */
    public static int SF_DATALESS() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define EF_MAY_SHARE_BLOCKS 1
     * }
     */
    public static int EF_MAY_SHARE_BLOCKS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EF_NO_XATTRS 2
     * }
     */
    public static int EF_NO_XATTRS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define EF_IS_SYNC_ROOT 4
     * }
     */
    public static int EF_IS_SYNC_ROOT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define EF_IS_PURGEABLE 8
     * }
     */
    public static int EF_IS_PURGEABLE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define EF_IS_SPARSE 16
     * }
     */
    public static int EF_IS_SPARSE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define EF_IS_SYNTHETIC 32
     * }
     */
    public static int EF_IS_SYNTHETIC() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define EF_SHARES_ALL_BLOCKS 64
     * }
     */
    public static int EF_SHARES_ALL_BLOCKS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define _FORTIFY_SOURCE 2
     * }
     */
    public static int _FORTIFY_SOURCE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RENAME_SECLUDE 1
     * }
     */
    public static int RENAME_SECLUDE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RENAME_SWAP 2
     * }
     */
    public static int RENAME_SWAP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RENAME_EXCL 4
     * }
     */
    public static int RENAME_EXCL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RENAME_RESERVED1 8
     * }
     */
    public static int RENAME_RESERVED1() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define RENAME_NOFOLLOW_ANY 16
     * }
     */
    public static int RENAME_NOFOLLOW_ANY() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SEEK_HOLE 3
     * }
     */
    public static int SEEK_HOLE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define SEEK_DATA 4
     * }
     */
    public static int SEEK_DATA() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SLBF 1
     * }
     */
    public static int __SLBF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SNBF 2
     * }
     */
    public static int __SNBF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __SRD 4
     * }
     */
    public static int __SRD() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SWR 8
     * }
     */
    public static int __SWR() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __SRW 16
     * }
     */
    public static int __SRW() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define __SEOF 32
     * }
     */
    public static int __SEOF() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define __SERR 64
     * }
     */
    public static int __SERR() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __SMBF 128
     * }
     */
    public static int __SMBF() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define __SAPP 256
     * }
     */
    public static int __SAPP() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define __SSTR 512
     * }
     */
    public static int __SSTR() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define __SOPT 1024
     * }
     */
    public static int __SOPT() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define __SNPT 2048
     * }
     */
    public static int __SNPT() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define __SOFF 4096
     * }
     */
    public static int __SOFF() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define __SMOD 8192
     * }
     */
    public static int __SMOD() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define __SALC 16384
     * }
     */
    public static int __SALC() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define __SIGN 32768
     * }
     */
    public static int __SIGN() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _IOLBF 1
     * }
     */
    public static int _IOLBF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IONBF 2
     * }
     */
    public static int _IONBF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define BUFSIZ 1024
     * }
     */
    public static int BUFSIZ() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define FOPEN_MAX 20
     * }
     */
    public static int FOPEN_MAX() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define FILENAME_MAX 1024
     * }
     */
    public static int FILENAME_MAX() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define L_tmpnam 1024
     * }
     */
    public static int L_tmpnam() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define TMP_MAX 308915776
     * }
     */
    public static int TMP_MAX() {
        return (int)308915776L;
    }
    /**
     * {@snippet :
     * #define L_ctermid 1024
     * }
     */
    public static int L_ctermid() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _USE_FORTIFY_LEVEL 2
     * }
     */
    public static int _USE_FORTIFY_LEVEL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define TIME_UTC 1
     * }
     */
    public static int TIME_UTC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_KEYS_MAX 128
     * }
     */
    public static int _POSIX_THREAD_KEYS_MAX() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define F_OK 0
     * }
     */
    public static int F_OK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define ACCESSX_MAX_DESCRIPTORS 100
     * }
     */
    public static int ACCESSX_MAX_DESCRIPTORS() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define _PC_LINK_MAX 1
     * }
     */
    public static int _PC_LINK_MAX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _PC_MAX_CANON 2
     * }
     */
    public static int _PC_MAX_CANON() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _PC_MAX_INPUT 3
     * }
     */
    public static int _PC_MAX_INPUT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _PC_NAME_MAX 4
     * }
     */
    public static int _PC_NAME_MAX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _PC_PATH_MAX 5
     * }
     */
    public static int _PC_PATH_MAX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define _PC_PIPE_BUF 6
     * }
     */
    public static int _PC_PIPE_BUF() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define _PC_CHOWN_RESTRICTED 7
     * }
     */
    public static int _PC_CHOWN_RESTRICTED() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define _PC_NO_TRUNC 8
     * }
     */
    public static int _PC_NO_TRUNC() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _PC_VDISABLE 9
     * }
     */
    public static int _PC_VDISABLE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _PC_NAME_CHARS_MAX 10
     * }
     */
    public static int _PC_NAME_CHARS_MAX() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define _PC_CASE_SENSITIVE 11
     * }
     */
    public static int _PC_CASE_SENSITIVE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define _PC_CASE_PRESERVING 12
     * }
     */
    public static int _PC_CASE_PRESERVING() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define _PC_EXTENDED_SECURITY_NP 13
     * }
     */
    public static int _PC_EXTENDED_SECURITY_NP() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define _PC_AUTH_OPAQUE_NP 14
     * }
     */
    public static int _PC_AUTH_OPAQUE_NP() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define _PC_2_SYMLINKS 15
     * }
     */
    public static int _PC_2_SYMLINKS() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define _PC_ALLOC_SIZE_MIN 16
     * }
     */
    public static int _PC_ALLOC_SIZE_MIN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _PC_ASYNC_IO 17
     * }
     */
    public static int _PC_ASYNC_IO() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define _PC_FILESIZEBITS 18
     * }
     */
    public static int _PC_FILESIZEBITS() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define _PC_PRIO_IO 19
     * }
     */
    public static int _PC_PRIO_IO() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define _PC_REC_INCR_XFER_SIZE 20
     * }
     */
    public static int _PC_REC_INCR_XFER_SIZE() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define _PC_REC_MAX_XFER_SIZE 21
     * }
     */
    public static int _PC_REC_MAX_XFER_SIZE() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define _PC_REC_MIN_XFER_SIZE 22
     * }
     */
    public static int _PC_REC_MIN_XFER_SIZE() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define _PC_REC_XFER_ALIGN 23
     * }
     */
    public static int _PC_REC_XFER_ALIGN() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define _PC_SYMLINK_MAX 24
     * }
     */
    public static int _PC_SYMLINK_MAX() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define _PC_SYNC_IO 25
     * }
     */
    public static int _PC_SYNC_IO() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define _PC_XATTR_SIZE_BITS 26
     * }
     */
    public static int _PC_XATTR_SIZE_BITS() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define _PC_MIN_HOLE_SIZE 27
     * }
     */
    public static int _PC_MIN_HOLE_SIZE() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define _CS_PATH 1
     * }
     */
    public static int _CS_PATH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define STDIN_FILENO 0
     * }
     */
    public static int STDIN_FILENO() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define STDOUT_FILENO 1
     * }
     */
    public static int STDOUT_FILENO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define STDERR_FILENO 2
     * }
     */
    public static int STDERR_FILENO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_VERSION 600
     * }
     */
    public static int _XOPEN_VERSION() {
        return (int)600L;
    }
    /**
     * {@snippet :
     * #define _XOPEN_XCU_VERSION 4
     * }
     */
    public static int _XOPEN_XCU_VERSION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _SC_ARG_MAX 1
     * }
     */
    public static int _SC_ARG_MAX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SC_CHILD_MAX 2
     * }
     */
    public static int _SC_CHILD_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _SC_CLK_TCK 3
     * }
     */
    public static int _SC_CLK_TCK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _SC_NGROUPS_MAX 4
     * }
     */
    public static int _SC_NGROUPS_MAX() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _SC_OPEN_MAX 5
     * }
     */
    public static int _SC_OPEN_MAX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define _SC_JOB_CONTROL 6
     * }
     */
    public static int _SC_JOB_CONTROL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define _SC_SAVED_IDS 7
     * }
     */
    public static int _SC_SAVED_IDS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define _SC_VERSION 8
     * }
     */
    public static int _SC_VERSION() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _SC_BC_BASE_MAX 9
     * }
     */
    public static int _SC_BC_BASE_MAX() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _SC_BC_DIM_MAX 10
     * }
     */
    public static int _SC_BC_DIM_MAX() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define _SC_BC_SCALE_MAX 11
     * }
     */
    public static int _SC_BC_SCALE_MAX() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define _SC_BC_STRING_MAX 12
     * }
     */
    public static int _SC_BC_STRING_MAX() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define _SC_COLL_WEIGHTS_MAX 13
     * }
     */
    public static int _SC_COLL_WEIGHTS_MAX() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define _SC_EXPR_NEST_MAX 14
     * }
     */
    public static int _SC_EXPR_NEST_MAX() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define _SC_LINE_MAX 15
     * }
     */
    public static int _SC_LINE_MAX() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define _SC_RE_DUP_MAX 16
     * }
     */
    public static int _SC_RE_DUP_MAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _SC_2_VERSION 17
     * }
     */
    public static int _SC_2_VERSION() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define _SC_2_C_BIND 18
     * }
     */
    public static int _SC_2_C_BIND() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define _SC_2_C_DEV 19
     * }
     */
    public static int _SC_2_C_DEV() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define _SC_2_CHAR_TERM 20
     * }
     */
    public static int _SC_2_CHAR_TERM() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define _SC_2_FORT_DEV 21
     * }
     */
    public static int _SC_2_FORT_DEV() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define _SC_2_FORT_RUN 22
     * }
     */
    public static int _SC_2_FORT_RUN() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define _SC_2_LOCALEDEF 23
     * }
     */
    public static int _SC_2_LOCALEDEF() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define _SC_2_SW_DEV 24
     * }
     */
    public static int _SC_2_SW_DEV() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define _SC_2_UPE 25
     * }
     */
    public static int _SC_2_UPE() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define _SC_STREAM_MAX 26
     * }
     */
    public static int _SC_STREAM_MAX() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define _SC_TZNAME_MAX 27
     * }
     */
    public static int _SC_TZNAME_MAX() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define _SC_ASYNCHRONOUS_IO 28
     * }
     */
    public static int _SC_ASYNCHRONOUS_IO() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define _SC_PAGESIZE 29
     * }
     */
    public static int _SC_PAGESIZE() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define _SC_MEMLOCK 30
     * }
     */
    public static int _SC_MEMLOCK() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define _SC_MEMLOCK_RANGE 31
     * }
     */
    public static int _SC_MEMLOCK_RANGE() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define _SC_MEMORY_PROTECTION 32
     * }
     */
    public static int _SC_MEMORY_PROTECTION() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _SC_MESSAGE_PASSING 33
     * }
     */
    public static int _SC_MESSAGE_PASSING() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define _SC_PRIORITIZED_IO 34
     * }
     */
    public static int _SC_PRIORITIZED_IO() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define _SC_PRIORITY_SCHEDULING 35
     * }
     */
    public static int _SC_PRIORITY_SCHEDULING() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define _SC_REALTIME_SIGNALS 36
     * }
     */
    public static int _SC_REALTIME_SIGNALS() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define _SC_SEMAPHORES 37
     * }
     */
    public static int _SC_SEMAPHORES() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define _SC_FSYNC 38
     * }
     */
    public static int _SC_FSYNC() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define _SC_SHARED_MEMORY_OBJECTS 39
     * }
     */
    public static int _SC_SHARED_MEMORY_OBJECTS() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define _SC_SYNCHRONIZED_IO 40
     * }
     */
    public static int _SC_SYNCHRONIZED_IO() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define _SC_TIMERS 41
     * }
     */
    public static int _SC_TIMERS() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define _SC_AIO_LISTIO_MAX 42
     * }
     */
    public static int _SC_AIO_LISTIO_MAX() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define _SC_AIO_MAX 43
     * }
     */
    public static int _SC_AIO_MAX() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * #define _SC_AIO_PRIO_DELTA_MAX 44
     * }
     */
    public static int _SC_AIO_PRIO_DELTA_MAX() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * #define _SC_DELAYTIMER_MAX 45
     * }
     */
    public static int _SC_DELAYTIMER_MAX() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * #define _SC_MQ_OPEN_MAX 46
     * }
     */
    public static int _SC_MQ_OPEN_MAX() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * #define _SC_MAPPED_FILES 47
     * }
     */
    public static int _SC_MAPPED_FILES() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * #define _SC_RTSIG_MAX 48
     * }
     */
    public static int _SC_RTSIG_MAX() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define _SC_SEM_NSEMS_MAX 49
     * }
     */
    public static int _SC_SEM_NSEMS_MAX() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * #define _SC_SEM_VALUE_MAX 50
     * }
     */
    public static int _SC_SEM_VALUE_MAX() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define _SC_SIGQUEUE_MAX 51
     * }
     */
    public static int _SC_SIGQUEUE_MAX() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * #define _SC_TIMER_MAX 52
     * }
     */
    public static int _SC_TIMER_MAX() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * #define _SC_NPROCESSORS_CONF 57
     * }
     */
    public static int _SC_NPROCESSORS_CONF() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * #define _SC_NPROCESSORS_ONLN 58
     * }
     */
    public static int _SC_NPROCESSORS_ONLN() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS 59
     * }
     */
    public static int _SC_2_PBS() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS_ACCOUNTING 60
     * }
     */
    public static int _SC_2_PBS_ACCOUNTING() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS_CHECKPOINT 61
     * }
     */
    public static int _SC_2_PBS_CHECKPOINT() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS_LOCATE 62
     * }
     */
    public static int _SC_2_PBS_LOCATE() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS_MESSAGE 63
     * }
     */
    public static int _SC_2_PBS_MESSAGE() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * #define _SC_2_PBS_TRACK 64
     * }
     */
    public static int _SC_2_PBS_TRACK() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define _SC_ADVISORY_INFO 65
     * }
     */
    public static int _SC_ADVISORY_INFO() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * #define _SC_BARRIERS 66
     * }
     */
    public static int _SC_BARRIERS() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * #define _SC_CLOCK_SELECTION 67
     * }
     */
    public static int _SC_CLOCK_SELECTION() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * #define _SC_CPUTIME 68
     * }
     */
    public static int _SC_CPUTIME() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * #define _SC_FILE_LOCKING 69
     * }
     */
    public static int _SC_FILE_LOCKING() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * #define _SC_GETGR_R_SIZE_MAX 70
     * }
     */
    public static int _SC_GETGR_R_SIZE_MAX() {
        return (int)70L;
    }
    /**
     * {@snippet :
     * #define _SC_GETPW_R_SIZE_MAX 71
     * }
     */
    public static int _SC_GETPW_R_SIZE_MAX() {
        return (int)71L;
    }
    /**
     * {@snippet :
     * #define _SC_HOST_NAME_MAX 72
     * }
     */
    public static int _SC_HOST_NAME_MAX() {
        return (int)72L;
    }
    /**
     * {@snippet :
     * #define _SC_LOGIN_NAME_MAX 73
     * }
     */
    public static int _SC_LOGIN_NAME_MAX() {
        return (int)73L;
    }
    /**
     * {@snippet :
     * #define _SC_MONOTONIC_CLOCK 74
     * }
     */
    public static int _SC_MONOTONIC_CLOCK() {
        return (int)74L;
    }
    /**
     * {@snippet :
     * #define _SC_MQ_PRIO_MAX 75
     * }
     */
    public static int _SC_MQ_PRIO_MAX() {
        return (int)75L;
    }
    /**
     * {@snippet :
     * #define _SC_READER_WRITER_LOCKS 76
     * }
     */
    public static int _SC_READER_WRITER_LOCKS() {
        return (int)76L;
    }
    /**
     * {@snippet :
     * #define _SC_REGEXP 77
     * }
     */
    public static int _SC_REGEXP() {
        return (int)77L;
    }
    /**
     * {@snippet :
     * #define _SC_SHELL 78
     * }
     */
    public static int _SC_SHELL() {
        return (int)78L;
    }
    /**
     * {@snippet :
     * #define _SC_SPAWN 79
     * }
     */
    public static int _SC_SPAWN() {
        return (int)79L;
    }
    /**
     * {@snippet :
     * #define _SC_SPIN_LOCKS 80
     * }
     */
    public static int _SC_SPIN_LOCKS() {
        return (int)80L;
    }
    /**
     * {@snippet :
     * #define _SC_SPORADIC_SERVER 81
     * }
     */
    public static int _SC_SPORADIC_SERVER() {
        return (int)81L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_ATTR_STACKADDR 82
     * }
     */
    public static int _SC_THREAD_ATTR_STACKADDR() {
        return (int)82L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_ATTR_STACKSIZE 83
     * }
     */
    public static int _SC_THREAD_ATTR_STACKSIZE() {
        return (int)83L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_CPUTIME 84
     * }
     */
    public static int _SC_THREAD_CPUTIME() {
        return (int)84L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_DESTRUCTOR_ITERATIONS 85
     * }
     */
    public static int _SC_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)85L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_KEYS_MAX 86
     * }
     */
    public static int _SC_THREAD_KEYS_MAX() {
        return (int)86L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_PRIO_INHERIT 87
     * }
     */
    public static int _SC_THREAD_PRIO_INHERIT() {
        return (int)87L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_PRIO_PROTECT 88
     * }
     */
    public static int _SC_THREAD_PRIO_PROTECT() {
        return (int)88L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_PRIORITY_SCHEDULING 89
     * }
     */
    public static int _SC_THREAD_PRIORITY_SCHEDULING() {
        return (int)89L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_PROCESS_SHARED 90
     * }
     */
    public static int _SC_THREAD_PROCESS_SHARED() {
        return (int)90L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_SAFE_FUNCTIONS 91
     * }
     */
    public static int _SC_THREAD_SAFE_FUNCTIONS() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_SPORADIC_SERVER 92
     * }
     */
    public static int _SC_THREAD_SPORADIC_SERVER() {
        return (int)92L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_STACK_MIN 93
     * }
     */
    public static int _SC_THREAD_STACK_MIN() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * #define _SC_THREAD_THREADS_MAX 94
     * }
     */
    public static int _SC_THREAD_THREADS_MAX() {
        return (int)94L;
    }
    /**
     * {@snippet :
     * #define _SC_TIMEOUTS 95
     * }
     */
    public static int _SC_TIMEOUTS() {
        return (int)95L;
    }
    /**
     * {@snippet :
     * #define _SC_THREADS 96
     * }
     */
    public static int _SC_THREADS() {
        return (int)96L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE 97
     * }
     */
    public static int _SC_TRACE() {
        return (int)97L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_EVENT_FILTER 98
     * }
     */
    public static int _SC_TRACE_EVENT_FILTER() {
        return (int)98L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_INHERIT 99
     * }
     */
    public static int _SC_TRACE_INHERIT() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_LOG 100
     * }
     */
    public static int _SC_TRACE_LOG() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define _SC_TTY_NAME_MAX 101
     * }
     */
    public static int _SC_TTY_NAME_MAX() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * #define _SC_TYPED_MEMORY_OBJECTS 102
     * }
     */
    public static int _SC_TYPED_MEMORY_OBJECTS() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * #define _SC_V6_ILP32_OFF32 103
     * }
     */
    public static int _SC_V6_ILP32_OFF32() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * #define _SC_V6_ILP32_OFFBIG 104
     * }
     */
    public static int _SC_V6_ILP32_OFFBIG() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * #define _SC_V6_LP64_OFF64 105
     * }
     */
    public static int _SC_V6_LP64_OFF64() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * #define _SC_V6_LPBIG_OFFBIG 106
     * }
     */
    public static int _SC_V6_LPBIG_OFFBIG() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * #define _SC_IPV6 118
     * }
     */
    public static int _SC_IPV6() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * #define _SC_RAW_SOCKETS 119
     * }
     */
    public static int _SC_RAW_SOCKETS() {
        return (int)119L;
    }
    /**
     * {@snippet :
     * #define _SC_SYMLOOP_MAX 120
     * }
     */
    public static int _SC_SYMLOOP_MAX() {
        return (int)120L;
    }
    /**
     * {@snippet :
     * #define _SC_ATEXIT_MAX 107
     * }
     */
    public static int _SC_ATEXIT_MAX() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * #define _SC_IOV_MAX 56
     * }
     */
    public static int _SC_IOV_MAX() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_CRYPT 108
     * }
     */
    public static int _SC_XOPEN_CRYPT() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_ENH_I18N 109
     * }
     */
    public static int _SC_XOPEN_ENH_I18N() {
        return (int)109L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_LEGACY 110
     * }
     */
    public static int _SC_XOPEN_LEGACY() {
        return (int)110L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_REALTIME 111
     * }
     */
    public static int _SC_XOPEN_REALTIME() {
        return (int)111L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_REALTIME_THREADS 112
     * }
     */
    public static int _SC_XOPEN_REALTIME_THREADS() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_SHM 113
     * }
     */
    public static int _SC_XOPEN_SHM() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_STREAMS 114
     * }
     */
    public static int _SC_XOPEN_STREAMS() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_UNIX 115
     * }
     */
    public static int _SC_XOPEN_UNIX() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_VERSION 116
     * }
     */
    public static int _SC_XOPEN_VERSION() {
        return (int)116L;
    }
    /**
     * {@snippet :
     * #define _SC_XOPEN_XCU_VERSION 121
     * }
     */
    public static int _SC_XOPEN_XCU_VERSION() {
        return (int)121L;
    }
    /**
     * {@snippet :
     * #define _SC_XBS5_ILP32_OFF32 122
     * }
     */
    public static int _SC_XBS5_ILP32_OFF32() {
        return (int)122L;
    }
    /**
     * {@snippet :
     * #define _SC_XBS5_ILP32_OFFBIG 123
     * }
     */
    public static int _SC_XBS5_ILP32_OFFBIG() {
        return (int)123L;
    }
    /**
     * {@snippet :
     * #define _SC_XBS5_LP64_OFF64 124
     * }
     */
    public static int _SC_XBS5_LP64_OFF64() {
        return (int)124L;
    }
    /**
     * {@snippet :
     * #define _SC_XBS5_LPBIG_OFFBIG 125
     * }
     */
    public static int _SC_XBS5_LPBIG_OFFBIG() {
        return (int)125L;
    }
    /**
     * {@snippet :
     * #define _SC_SS_REPL_MAX 126
     * }
     */
    public static int _SC_SS_REPL_MAX() {
        return (int)126L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_EVENT_NAME_MAX 127
     * }
     */
    public static int _SC_TRACE_EVENT_NAME_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_NAME_MAX 128
     * }
     */
    public static int _SC_TRACE_NAME_MAX() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_SYS_MAX 129
     * }
     */
    public static int _SC_TRACE_SYS_MAX() {
        return (int)129L;
    }
    /**
     * {@snippet :
     * #define _SC_TRACE_USER_EVENT_MAX 130
     * }
     */
    public static int _SC_TRACE_USER_EVENT_MAX() {
        return (int)130L;
    }
    /**
     * {@snippet :
     * #define _SC_PASS_MAX 131
     * }
     */
    public static int _SC_PASS_MAX() {
        return (int)131L;
    }
    /**
     * {@snippet :
     * #define _SC_PHYS_PAGES 200
     * }
     */
    public static int _SC_PHYS_PAGES() {
        return (int)200L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFF32_CFLAGS 2
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_CFLAGS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFF32_LDFLAGS 3
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFF32_LIBS 4
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFF32_LIBS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS 5
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS 6
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_ILP32_OFFBIG_LIBS 7
     * }
     */
    public static int _CS_POSIX_V6_ILP32_OFFBIG_LIBS() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LP64_OFF64_CFLAGS 8
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_CFLAGS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LP64_OFF64_LDFLAGS 9
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LDFLAGS() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LP64_OFF64_LIBS 10
     * }
     */
    public static int _CS_POSIX_V6_LP64_OFF64_LIBS() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS 11
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS 12
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_LPBIG_OFFBIG_LIBS 13
     * }
     */
    public static int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS 14
     * }
     */
    public static int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFF32_CFLAGS 20
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_CFLAGS() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFF32_LDFLAGS 21
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LDFLAGS() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFF32_LIBS 22
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LIBS() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFF32_LINTFLAGS 23
     * }
     */
    public static int _CS_XBS5_ILP32_OFF32_LINTFLAGS() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFFBIG_CFLAGS 24
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_CFLAGS() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFFBIG_LDFLAGS 25
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LDFLAGS() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFFBIG_LIBS 26
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LIBS() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_ILP32_OFFBIG_LINTFLAGS 27
     * }
     */
    public static int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LP64_OFF64_CFLAGS 28
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_CFLAGS() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LP64_OFF64_LDFLAGS 29
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LDFLAGS() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LP64_OFF64_LIBS 30
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LIBS() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LP64_OFF64_LINTFLAGS 31
     * }
     */
    public static int _CS_XBS5_LP64_OFF64_LINTFLAGS() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LPBIG_OFFBIG_CFLAGS 32
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_CFLAGS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LPBIG_OFFBIG_LDFLAGS 33
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LPBIG_OFFBIG_LIBS 34
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LIBS() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS 35
     * }
     */
    public static int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define _CS_DARWIN_USER_DIR 65536
     * }
     */
    public static int _CS_DARWIN_USER_DIR() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define _CS_DARWIN_USER_TEMP_DIR 65537
     * }
     */
    public static int _CS_DARWIN_USER_TEMP_DIR() {
        return (int)65537L;
    }
    /**
     * {@snippet :
     * #define _CS_DARWIN_USER_CACHE_DIR 65538
     * }
     */
    public static int _CS_DARWIN_USER_CACHE_DIR() {
        return (int)65538L;
    }
    /**
     * {@snippet :
     * #define F_ULOCK 0
     * }
     */
    public static int F_ULOCK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define F_LOCK 1
     * }
     */
    public static int F_LOCK() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define F_TLOCK 2
     * }
     */
    public static int F_TLOCK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define F_TEST 3
     * }
     */
    public static int F_TEST() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_FD_SETSIZE 1024
     * }
     */
    public static int __DARWIN_FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_NBBY 8
     * }
     */
    public static int __DARWIN_NBBY() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SYNC_VOLUME_FULLSYNC 1
     * }
     */
    public static int SYNC_VOLUME_FULLSYNC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SYNC_VOLUME_WAIT 2
     * }
     */
    public static int SYNC_VOLUME_WAIT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_EOF 1
     * }
     */
    public static int ARCHIVE_EOF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_OK 0
     * }
     */
    public static int ARCHIVE_OK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_NONE 0
     * }
     */
    public static int ARCHIVE_FILTER_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_GZIP 1
     * }
     */
    public static int ARCHIVE_FILTER_GZIP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_BZIP2 2
     * }
     */
    public static int ARCHIVE_FILTER_BZIP2() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_COMPRESS 3
     * }
     */
    public static int ARCHIVE_FILTER_COMPRESS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_PROGRAM 4
     * }
     */
    public static int ARCHIVE_FILTER_PROGRAM() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_LZMA 5
     * }
     */
    public static int ARCHIVE_FILTER_LZMA() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_XZ 6
     * }
     */
    public static int ARCHIVE_FILTER_XZ() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_UU 7
     * }
     */
    public static int ARCHIVE_FILTER_UU() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_RPM 8
     * }
     */
    public static int ARCHIVE_FILTER_RPM() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_LZIP 9
     * }
     */
    public static int ARCHIVE_FILTER_LZIP() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_LRZIP 10
     * }
     */
    public static int ARCHIVE_FILTER_LRZIP() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_LZOP 11
     * }
     */
    public static int ARCHIVE_FILTER_LZOP() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_GRZIP 12
     * }
     */
    public static int ARCHIVE_FILTER_GRZIP() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_LZ4 13
     * }
     */
    public static int ARCHIVE_FILTER_LZ4() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FILTER_ZSTD 14
     * }
     */
    public static int ARCHIVE_FILTER_ZSTD() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_BASE_MASK 16711680
     * }
     */
    public static int ARCHIVE_FORMAT_BASE_MASK() {
        return (int)16711680L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_CPIO 65536
     * }
     */
    public static int ARCHIVE_FORMAT_CPIO() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_SHAR 131072
     * }
     */
    public static int ARCHIVE_FORMAT_SHAR() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_TAR 196608
     * }
     */
    public static int ARCHIVE_FORMAT_TAR() {
        return (int)196608L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_ISO9660 262144
     * }
     */
    public static int ARCHIVE_FORMAT_ISO9660() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_ZIP 327680
     * }
     */
    public static int ARCHIVE_FORMAT_ZIP() {
        return (int)327680L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_EMPTY 393216
     * }
     */
    public static int ARCHIVE_FORMAT_EMPTY() {
        return (int)393216L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_AR 458752
     * }
     */
    public static int ARCHIVE_FORMAT_AR() {
        return (int)458752L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_MTREE 524288
     * }
     */
    public static int ARCHIVE_FORMAT_MTREE() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_RAW 589824
     * }
     */
    public static int ARCHIVE_FORMAT_RAW() {
        return (int)589824L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_XAR 655360
     * }
     */
    public static int ARCHIVE_FORMAT_XAR() {
        return (int)655360L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_LHA 720896
     * }
     */
    public static int ARCHIVE_FORMAT_LHA() {
        return (int)720896L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_CAB 786432
     * }
     */
    public static int ARCHIVE_FORMAT_CAB() {
        return (int)786432L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_RAR 851968
     * }
     */
    public static int ARCHIVE_FORMAT_RAR() {
        return (int)851968L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_7ZIP 917504
     * }
     */
    public static int ARCHIVE_FORMAT_7ZIP() {
        return (int)917504L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_WARC 983040
     * }
     */
    public static int ARCHIVE_FORMAT_WARC() {
        return (int)983040L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_FORMAT_RAR_V5 1048576
     * }
     */
    public static int ARCHIVE_FORMAT_RAR_V5() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * #define _QUAD_HIGHWORD 1
     * }
     */
    public static int _QUAD_HIGHWORD() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _QUAD_LOWWORD 0
     * }
     */
    public static int _QUAD_LOWWORD() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_LITTLE_ENDIAN 1234
     * }
     */
    public static int __DARWIN_LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_BIG_ENDIAN 4321
     * }
     */
    public static int __DARWIN_BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define __DARWIN_PDP_ENDIAN 3412
     * }
     */
    public static int __DARWIN_PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define AE_SYMLINK_TYPE_UNDEFINED 0
     * }
     */
    public static int AE_SYMLINK_TYPE_UNDEFINED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define AE_SYMLINK_TYPE_FILE 1
     * }
     */
    public static int AE_SYMLINK_TYPE_FILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define AE_SYMLINK_TYPE_DIRECTORY 2
     * }
     */
    public static int AE_SYMLINK_TYPE_DIRECTORY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_DIGEST_MD5 1
     * }
     */
    public static int ARCHIVE_ENTRY_DIGEST_MD5() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_DIGEST_RMD160 2
     * }
     */
    public static int ARCHIVE_ENTRY_DIGEST_RMD160() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_DIGEST_SHA1 3
     * }
     */
    public static int ARCHIVE_ENTRY_DIGEST_SHA1() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_DIGEST_SHA256 4
     * }
     */
    public static int ARCHIVE_ENTRY_DIGEST_SHA256() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_DIGEST_SHA384 5
     * }
     */
    public static int ARCHIVE_ENTRY_DIGEST_SHA384() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_DIGEST_SHA512 6
     * }
     */
    public static int ARCHIVE_ENTRY_DIGEST_SHA512() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_EXECUTE 1
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_EXECUTE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_WRITE 2
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_WRITE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_READ 4
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_READ() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_READ_DATA 8
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_READ_DATA() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_LIST_DIRECTORY 8
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_LIST_DIRECTORY() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_WRITE_DATA 16
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_WRITE_DATA() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_ADD_FILE 16
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_ADD_FILE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_APPEND_DATA 32
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_APPEND_DATA() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_ADD_SUBDIRECTORY 32
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_ADD_SUBDIRECTORY() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS 64
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_READ_NAMED_ATTRS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS 128
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_WRITE_NAMED_ATTRS() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_DELETE_CHILD 256
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_DELETE_CHILD() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES 512
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_READ_ATTRIBUTES() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES 1024
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_WRITE_ATTRIBUTES() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_DELETE 2048
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_DELETE() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_READ_ACL 4096
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_READ_ACL() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_WRITE_ACL 8192
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_WRITE_ACL() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_WRITE_OWNER 16384
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_WRITE_OWNER() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_SYNCHRONIZE 32768
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_SYNCHRONIZE() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_ENTRY_INHERITED 16777216
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_ENTRY_INHERITED() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT 33554432
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_ENTRY_FILE_INHERIT() {
        return (int)33554432L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT 67108864
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_ENTRY_DIRECTORY_INHERIT() {
        return (int)67108864L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT 134217728
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_ENTRY_NO_PROPAGATE_INHERIT() {
        return (int)134217728L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY 268435456
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_ENTRY_INHERIT_ONLY() {
        return (int)268435456L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS 536870912
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_ENTRY_SUCCESSFUL_ACCESS() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS 1073741824
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_ENTRY_FAILED_ACCESS() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_TYPE_ACCESS 256
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_TYPE_ACCESS() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_TYPE_DEFAULT 512
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_TYPE_DEFAULT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_TYPE_ALLOW 1024
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_TYPE_ALLOW() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_TYPE_DENY 2048
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_TYPE_DENY() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_TYPE_AUDIT 4096
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_TYPE_AUDIT() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_TYPE_ALARM 8192
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_TYPE_ALARM() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_USER 10001
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_USER() {
        return (int)10001L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_USER_OBJ 10002
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_USER_OBJ() {
        return (int)10002L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_GROUP 10003
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_GROUP() {
        return (int)10003L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_GROUP_OBJ 10004
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_GROUP_OBJ() {
        return (int)10004L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_MASK 10005
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_MASK() {
        return (int)10005L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_OTHER 10006
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_OTHER() {
        return (int)10006L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_EVERYONE 10107
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_EVERYONE() {
        return (int)10107L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID 1
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT 2
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_STYLE_SOLARIS 4
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_STYLE_SOLARIS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_STYLE_SEPARATOR_COMMA 8
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_STYLE_SEPARATOR_COMMA() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define ARCHIVE_ENTRY_ACL_STYLE_COMPACT 16
     * }
     */
    public static int ARCHIVE_ENTRY_ACL_STYLE_COMPACT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define OLD_ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID 1024
     * }
     */
    public static int OLD_ARCHIVE_ENTRY_ACL_STYLE_EXTRA_ID() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define OLD_ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT 2048
     * }
     */
    public static int OLD_ARCHIVE_ENTRY_ACL_STYLE_MARK_DEFAULT() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long __int64_t;
     * }
     */
    public static final OfLong __int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __darwin_intptr_t;
     * }
     */
    public static final OfLong __darwin_intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_natural_t;
     * }
     */
    public static final OfInt __darwin_natural_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_ct_rune_t;
     * }
     */
    public static final OfInt __darwin_ct_rune_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __darwin_ptrdiff_t;
     * }
     */
    public static final OfLong __darwin_ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_size_t;
     * }
     */
    public static final OfLong __darwin_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_wchar_t;
     * }
     */
    public static final OfInt __darwin_wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_rune_t;
     * }
     */
    public static final OfInt __darwin_rune_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_wint_t;
     * }
     */
    public static final OfInt __darwin_wint_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_clock_t;
     * }
     */
    public static final OfLong __darwin_clock_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_socklen_t;
     * }
     */
    public static final OfInt __darwin_socklen_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long __darwin_ssize_t;
     * }
     */
    public static final OfLong __darwin_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long __darwin_time_t;
     * }
     */
    public static final OfLong __darwin_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long __darwin_blkcnt_t;
     * }
     */
    public static final OfLong __darwin_blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_blksize_t;
     * }
     */
    public static final OfInt __darwin_blksize_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_dev_t;
     * }
     */
    public static final OfInt __darwin_dev_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_fsblkcnt_t;
     * }
     */
    public static final OfInt __darwin_fsblkcnt_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_fsfilcnt_t;
     * }
     */
    public static final OfInt __darwin_fsfilcnt_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_gid_t;
     * }
     */
    public static final OfInt __darwin_gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_id_t;
     * }
     */
    public static final OfInt __darwin_id_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long __darwin_ino64_t;
     * }
     */
    public static final OfLong __darwin_ino64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long __darwin_ino_t;
     * }
     */
    public static final OfLong __darwin_ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_mach_port_name_t;
     * }
     */
    public static final OfInt __darwin_mach_port_name_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_mach_port_t;
     * }
     */
    public static final OfInt __darwin_mach_port_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned short __darwin_mode_t;
     * }
     */
    public static final OfShort __darwin_mode_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef long long __darwin_off_t;
     * }
     */
    public static final OfLong __darwin_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int __darwin_pid_t;
     * }
     */
    public static final OfInt __darwin_pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_sigset_t;
     * }
     */
    public static final OfInt __darwin_sigset_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_suseconds_t;
     * }
     */
    public static final OfInt __darwin_suseconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_uid_t;
     * }
     */
    public static final OfInt __darwin_uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_useconds_t;
     * }
     */
    public static final OfInt __darwin_useconds_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long __darwin_pthread_key_t;
     * }
     */
    public static final OfLong __darwin_pthread_key_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef struct _opaque_pthread_t* __darwin_pthread_t;
     * }
     */
    public static final AddressLayout __darwin_pthread_t = RuntimeHelper.POINTER;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int64_t;
     * }
     */
    public static final OfLong int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long register_t;
     * }
     */
    public static final OfLong register_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_addr_t;
     * }
     */
    public static final OfLong user_addr_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_size_t;
     * }
     */
    public static final OfLong user_size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_ssize_t;
     * }
     */
    public static final OfLong user_ssize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_long_t;
     * }
     */
    public static final OfLong user_long_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long user_ulong_t;
     * }
     */
    public static final OfLong user_ulong_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_time_t;
     * }
     */
    public static final OfLong user_time_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long user_off_t;
     * }
     */
    public static final OfLong user_off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long syscall_arg_t;
     * }
     */
    public static final OfLong syscall_arg_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int blksize_t;
     * }
     */
    public static final OfInt blksize_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int dev_t;
     * }
     */
    public static final OfInt dev_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long ino_t;
     * }
     */
    public static final OfLong ino_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long long ino64_t;
     * }
     */
    public static final OfLong ino64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned short mode_t;
     * }
     */
    public static final OfShort mode_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned short nlink_t;
     * }
     */
    public static final OfShort nlink_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long off_t;
     * }
     */
    public static final OfLong off_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = JAVA_LONG;
    public static MethodHandle chmod$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$1,"chmod");
    }
    /**
     * {@snippet :
     * int chmod(char*, mode_t);
     * }
     */
    public static int chmod(MemorySegment x0, short x1) {
        var mh$ = chmod$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$3,"fchmod");
    }
    /**
     * {@snippet :
     * int fchmod(int, mode_t);
     * }
     */
    public static int fchmod(int x0, short x1) {
        var mh$ = fchmod$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstat$MH() {
        return RuntimeHelper.requireNonNull(constants$12.const$5,"fstat");
    }
    /**
     * {@snippet :
     * int fstat(int, struct stat*);
     * }
     */
    public static int fstat(int x0, MemorySegment x1) {
        var mh$ = fstat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstat$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$1,"lstat");
    }
    /**
     * {@snippet :
     * int lstat(char*, struct stat*);
     * }
     */
    public static int lstat(MemorySegment x0, MemorySegment x1) {
        var mh$ = lstat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdir$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$2,"mkdir");
    }
    /**
     * {@snippet :
     * int mkdir(char*, mode_t);
     * }
     */
    public static int mkdir(MemorySegment x0, short x1) {
        var mh$ = mkdir$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifo$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$3,"mkfifo");
    }
    /**
     * {@snippet :
     * int mkfifo(char*, mode_t);
     * }
     */
    public static int mkfifo(MemorySegment x0, short x1) {
        var mh$ = mkfifo$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stat$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$4,"stat");
    }
    /**
     * {@snippet :
     * int stat(char*, struct stat*);
     * }
     */
    public static int stat(MemorySegment x0, MemorySegment x1) {
        var mh$ = stat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknod$MH() {
        return RuntimeHelper.requireNonNull(constants$13.const$6,"mknod");
    }
    /**
     * {@snippet :
     * int mknod(char*, mode_t, dev_t);
     * }
     */
    public static int mknod(MemorySegment x0, short x1, int x2) {
        var mh$ = mknod$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle umask$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$1,"umask");
    }
    /**
     * {@snippet :
     * mode_t umask(mode_t);
     * }
     */
    public static short umask(short x0) {
        var mh$ = umask$MH();
        try {
            return (short)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmodat$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$3,"fchmodat");
    }
    /**
     * {@snippet :
     * int fchmodat(int, char*, mode_t, int);
     * }
     */
    public static int fchmodat(int x0, MemorySegment x1, short x2, int x3) {
        var mh$ = fchmodat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatat$MH() {
        return RuntimeHelper.requireNonNull(constants$14.const$5,"fstatat");
    }
    /**
     * {@snippet :
     * int fstatat(int, char*, struct stat*, int);
     * }
     */
    public static int fstatat(int x0, MemorySegment x1, MemorySegment x2, int x3) {
        var mh$ = fstatat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdirat$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$1,"mkdirat");
    }
    /**
     * {@snippet :
     * int mkdirat(int, char*, mode_t);
     * }
     */
    public static int mkdirat(int x0, MemorySegment x1, short x2) {
        var mh$ = mkdirat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifoat$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$2,"mkfifoat");
    }
    /**
     * {@snippet :
     * int mkfifoat(int, char*, mode_t);
     * }
     */
    public static int mkfifoat(int x0, MemorySegment x1, short x2) {
        var mh$ = mkfifoat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mknodat$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$3,"mknodat");
    }
    /**
     * {@snippet :
     * int mknodat(int, char*, mode_t, dev_t);
     * }
     */
    public static int mknodat(int x0, MemorySegment x1, short x2, int x3) {
        var mh$ = mknodat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimens$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$4,"futimens");
    }
    /**
     * {@snippet :
     * int futimens(int __fd, struct timespec __times[2]);
     * }
     */
    public static int futimens(int __fd, MemorySegment __times) {
        var mh$ = futimens$MH();
        try {
            return (int)mh$.invokeExact(__fd, __times);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimensat$MH() {
        return RuntimeHelper.requireNonNull(constants$15.const$5,"utimensat");
    }
    /**
     * {@snippet :
     * int utimensat(int __fd, char* __path, struct timespec __times[2], int __flag);
     * }
     */
    public static int utimensat(int __fd, MemorySegment __path, MemorySegment __times, int __flag) {
        var mh$ = utimensat$MH();
        try {
            return (int)mh$.invokeExact(__fd, __path, __times, __flag);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct _filesec* filesec_t;
     * }
     */
    public static final AddressLayout filesec_t = RuntimeHelper.POINTER;
    public static MethodHandle chflags$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$1,"chflags");
    }
    /**
     * {@snippet :
     * int chflags(char*, __uint32_t);
     * }
     */
    public static int chflags(MemorySegment x0, int x1) {
        var mh$ = chflags$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chmodx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$2,"chmodx_np");
    }
    /**
     * {@snippet :
     * int chmodx_np(char*, filesec_t);
     * }
     */
    public static int chmodx_np(MemorySegment x0, MemorySegment x1) {
        var mh$ = chmodx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchflags$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$4,"fchflags");
    }
    /**
     * {@snippet :
     * int fchflags(int, __uint32_t);
     * }
     */
    public static int fchflags(int x0, int x1) {
        var mh$ = fchflags$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchmodx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$16.const$5,"fchmodx_np");
    }
    /**
     * {@snippet :
     * int fchmodx_np(int, filesec_t);
     * }
     */
    public static int fchmodx_np(int x0, MemorySegment x1) {
        var mh$ = fchmodx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$1,"fstatx_np");
    }
    /**
     * {@snippet :
     * int fstatx_np(int, struct stat*, filesec_t);
     * }
     */
    public static int fstatx_np(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = fstatx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchflags$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$2,"lchflags");
    }
    /**
     * {@snippet :
     * int lchflags(char*, __uint32_t);
     * }
     */
    public static int lchflags(MemorySegment x0, int x1) {
        var mh$ = lchflags$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lchmod$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$3,"lchmod");
    }
    /**
     * {@snippet :
     * int lchmod(char*, mode_t);
     * }
     */
    public static int lchmod(MemorySegment x0, short x1) {
        var mh$ = lchmod$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstatx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$17.const$5,"lstatx_np");
    }
    /**
     * {@snippet :
     * int lstatx_np(char*, struct stat*, filesec_t);
     * }
     */
    public static int lstatx_np(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = lstatx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdirx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$0,"mkdirx_np");
    }
    /**
     * {@snippet :
     * int mkdirx_np(char*, filesec_t);
     * }
     */
    public static int mkdirx_np(MemorySegment x0, MemorySegment x1) {
        var mh$ = mkdirx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkfifox_np$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$1,"mkfifox_np");
    }
    /**
     * {@snippet :
     * int mkfifox_np(char*, filesec_t);
     * }
     */
    public static int mkfifox_np(MemorySegment x0, MemorySegment x1) {
        var mh$ = mkfifox_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle statx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$2,"statx_np");
    }
    /**
     * {@snippet :
     * int statx_np(char*, struct stat*, filesec_t);
     * }
     */
    public static int statx_np(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = statx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle umaskx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$4,"umaskx_np");
    }
    /**
     * {@snippet :
     * int umaskx_np(filesec_t);
     * }
     */
    public static int umaskx_np(MemorySegment x0) {
        var mh$ = umaskx_np$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstatx64_np$MH() {
        return RuntimeHelper.requireNonNull(constants$18.const$5,"fstatx64_np");
    }
    /**
     * {@snippet :
     * int fstatx64_np(int, struct stat64*, filesec_t);
     * }
     */
    public static int fstatx64_np(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = fstatx64_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstatx64_np$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$0,"lstatx64_np");
    }
    /**
     * {@snippet :
     * int lstatx64_np(char*, struct stat64*, filesec_t);
     * }
     */
    public static int lstatx64_np(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = lstatx64_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle statx64_np$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$1,"statx64_np");
    }
    /**
     * {@snippet :
     * int statx64_np(char*, struct stat64*, filesec_t);
     * }
     */
    public static int statx64_np(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = statx64_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fstat64$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$2,"fstat64");
    }
    /**
     * {@snippet :
     * int fstat64(int, struct stat64*);
     * }
     */
    public static int fstat64(int x0, MemorySegment x1) {
        var mh$ = fstat64$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lstat64$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$3,"lstat64");
    }
    /**
     * {@snippet :
     * int lstat64(char*, struct stat64*);
     * }
     */
    public static int lstat64(MemorySegment x0, MemorySegment x1) {
        var mh$ = lstat64$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stat64$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$4,"stat64");
    }
    /**
     * {@snippet :
     * int stat64(char*, struct stat64*);
     * }
     */
    public static int stat64(MemorySegment x0, MemorySegment x1) {
        var mh$ = stat64$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int __darwin_nl_item;
     * }
     */
    public static final OfInt __darwin_nl_item = JAVA_INT;
    /**
     * {@snippet :
     * typedef int __darwin_wctrans_t;
     * }
     */
    public static final OfInt __darwin_wctrans_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int __darwin_wctype_t;
     * }
     */
    public static final OfInt __darwin_wctype_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long rsize_t;
     * }
     */
    public static final OfLong rsize_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef int wint_t;
     * }
     */
    public static final OfInt wint_t = JAVA_INT;
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$19.const$6,"renameat");
    }
    /**
     * {@snippet :
     * int renameat(int, char*, int, char*);
     * }
     */
    public static int renameat(int x0, MemorySegment x1, int x2, MemorySegment x3) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renamex_np$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$1,"renamex_np");
    }
    /**
     * {@snippet :
     * int renamex_np(char*, char*, unsigned int);
     * }
     */
    public static int renamex_np(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = renamex_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameatx_np$MH() {
        return RuntimeHelper.requireNonNull(constants$20.const$3,"renameatx_np");
    }
    /**
     * {@snippet :
     * int renameatx_np(int, char*, int, char*, unsigned int);
     * }
     */
    public static int renameatx_np(int x0, MemorySegment x1, int x2, MemorySegment x3, int x4) {
        var mh$ = renameatx_np$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long long fpos_t;
     * }
     */
    public static final OfLong fpos_t = JAVA_LONG;
    public static MemoryLayout __stdinp$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle __stdinp$VH() {
        return constants$25.const$1;
    }
    public static MemorySegment __stdinp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.const$2,"__stdinp");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* __stdinp;
     * }
     */
    public static MemorySegment __stdinp$get() {
        return (java.lang.foreign.MemorySegment) constants$25.const$1.get(RuntimeHelper.requireNonNull(constants$25.const$2, "__stdinp"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* __stdinp;
     * }
     */
    public static void __stdinp$set(MemorySegment x) {
        constants$25.const$1.set(RuntimeHelper.requireNonNull(constants$25.const$2, "__stdinp"), x);
    }
    public static MemoryLayout __stdoutp$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle __stdoutp$VH() {
        return constants$25.const$1;
    }
    public static MemorySegment __stdoutp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.const$3,"__stdoutp");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* __stdoutp;
     * }
     */
    public static MemorySegment __stdoutp$get() {
        return (java.lang.foreign.MemorySegment) constants$25.const$1.get(RuntimeHelper.requireNonNull(constants$25.const$3, "__stdoutp"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* __stdoutp;
     * }
     */
    public static void __stdoutp$set(MemorySegment x) {
        constants$25.const$1.set(RuntimeHelper.requireNonNull(constants$25.const$3, "__stdoutp"), x);
    }
    public static MemoryLayout __stderrp$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle __stderrp$VH() {
        return constants$25.const$1;
    }
    public static MemorySegment __stderrp$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$25.const$4,"__stderrp");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* __stderrp;
     * }
     */
    public static MemorySegment __stderrp$get() {
        return (java.lang.foreign.MemorySegment) constants$25.const$1.get(RuntimeHelper.requireNonNull(constants$25.const$4, "__stderrp"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* __stderrp;
     * }
     */
    public static void __stderrp$set(MemorySegment x) {
        constants$25.const$1.set(RuntimeHelper.requireNonNull(constants$25.const$4, "__stderrp"), x);
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$25.const$5,"clearerr");
    }
    /**
     * {@snippet :
     * void clearerr(FILE*);
     * }
     */
    public static void clearerr(MemorySegment x0) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$0,"fclose");
    }
    /**
     * {@snippet :
     * int fclose(FILE*);
     * }
     */
    public static int fclose(MemorySegment x0) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$1,"feof");
    }
    /**
     * {@snippet :
     * int feof(FILE*);
     * }
     */
    public static int feof(MemorySegment x0) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$2,"ferror");
    }
    /**
     * {@snippet :
     * int ferror(FILE*);
     * }
     */
    public static int ferror(MemorySegment x0) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$3,"fflush");
    }
    /**
     * {@snippet :
     * int fflush(FILE*);
     * }
     */
    public static int fflush(MemorySegment x0) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$4,"fgetc");
    }
    /**
     * {@snippet :
     * int fgetc(FILE*);
     * }
     */
    public static int fgetc(MemorySegment x0) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$26.const$5,"fgetpos");
    }
    /**
     * {@snippet :
     * int fgetpos(FILE*, fpos_t*);
     * }
     */
    public static int fgetpos(MemorySegment x0, MemorySegment x1) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$1,"fgets");
    }
    /**
     * {@snippet :
     * char* fgets(char*, int, FILE*);
     * }
     */
    public static MemorySegment fgets(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$3,"fopen");
    }
    /**
     * {@snippet :
     * FILE* fopen(char* __filename, char* __mode);
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __mode) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__filename, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$4,"fprintf");
    }
    /**
     * {@snippet :
     * int fprintf(FILE*, char*,...);
     * }
     */
    public static int fprintf(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$27.const$5,"fputc");
    }
    /**
     * {@snippet :
     * int fputc(int, FILE*);
     * }
     */
    public static int fputc(int x0, MemorySegment x1) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$0,"fputs");
    }
    /**
     * {@snippet :
     * int fputs(char*, FILE*);
     * }
     */
    public static int fputs(MemorySegment x0, MemorySegment x1) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$2,"fread");
    }
    /**
     * {@snippet :
     * unsigned long fread(void* __ptr, size_t __size, size_t __nitems, FILE* __stream);
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __nitems, MemorySegment __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$4,"freopen");
    }
    /**
     * {@snippet :
     * FILE* freopen(char*, char*, FILE*);
     * }
     */
    public static MemorySegment freopen(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.const$5,"fscanf");
    }
    /**
     * {@snippet :
     * int fscanf(FILE*, char*,...);
     * }
     */
    public static int fscanf(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$1,"fseek");
    }
    /**
     * {@snippet :
     * int fseek(FILE*, long, int);
     * }
     */
    public static int fseek(MemorySegment x0, long x1, int x2) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$2,"fsetpos");
    }
    /**
     * {@snippet :
     * int fsetpos(FILE*, const fpos_t*);
     * }
     */
    public static int fsetpos(MemorySegment x0, MemorySegment x1) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$4,"ftell");
    }
    /**
     * {@snippet :
     * long ftell(FILE*);
     * }
     */
    public static long ftell(MemorySegment x0) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$29.const$5,"fwrite");
    }
    /**
     * {@snippet :
     * unsigned long fwrite(void* __ptr, size_t __size, size_t __nitems, FILE* __stream);
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __nitems, MemorySegment __stream) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __nitems, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$0,"getc");
    }
    /**
     * {@snippet :
     * int getc(FILE*);
     * }
     */
    public static int getc(MemorySegment x0) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$2,"getchar");
    }
    /**
     * {@snippet :
     * int getchar();
     * }
     */
    public static int getchar() {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gets$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$4,"gets");
    }
    /**
     * {@snippet :
     * char* gets(char*);
     * }
     */
    public static MemorySegment gets(MemorySegment x0) {
        var mh$ = gets$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$30.const$5,"perror");
    }
    /**
     * {@snippet :
     * void perror(char*);
     * }
     */
    public static void perror(MemorySegment x0) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$0,"printf");
    }
    /**
     * {@snippet :
     * int printf(char*,...);
     * }
     */
    public static int printf(MemorySegment x0, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$1,"putc");
    }
    /**
     * {@snippet :
     * int putc(int, FILE*);
     * }
     */
    public static int putc(int x0, MemorySegment x1) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$3,"putchar");
    }
    /**
     * {@snippet :
     * int putchar(int);
     * }
     */
    public static int putchar(int x0) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$4,"puts");
    }
    /**
     * {@snippet :
     * int puts(char*);
     * }
     */
    public static int puts(MemorySegment x0) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$31.const$5,"remove");
    }
    /**
     * {@snippet :
     * int remove(char*);
     * }
     */
    public static int remove(MemorySegment x0) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$0,"rename");
    }
    /**
     * {@snippet :
     * int rename(char* __old, char* __new);
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$1,"rewind");
    }
    /**
     * {@snippet :
     * void rewind(FILE*);
     * }
     */
    public static void rewind(MemorySegment x0) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$2,"scanf");
    }
    /**
     * {@snippet :
     * int scanf(char*,...);
     * }
     */
    public static int scanf(MemorySegment x0, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$4,"setbuf");
    }
    /**
     * {@snippet :
     * void setbuf(FILE*, char*);
     * }
     */
    public static void setbuf(MemorySegment x0, MemorySegment x1) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.const$6,"setvbuf");
    }
    /**
     * {@snippet :
     * int setvbuf(FILE*, char*, int, size_t);
     * }
     */
    public static int setvbuf(MemorySegment x0, MemorySegment x1, int x2, long x3) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$0,"sprintf");
    }
    /**
     * {@snippet :
     * int sprintf(char*, char*,...);
     * }
     */
    public static int sprintf(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$1,"sscanf");
    }
    /**
     * {@snippet :
     * int sscanf(char*, char*,...);
     * }
     */
    public static int sscanf(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$3,"tmpfile");
    }
    /**
     * {@snippet :
     * FILE* tmpfile();
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$4,"tmpnam");
    }
    /**
     * {@snippet :
     * char* tmpnam(char*);
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$33.const$5,"ungetc");
    }
    /**
     * {@snippet :
     * int ungetc(int, FILE*);
     * }
     */
    public static int ungetc(int x0, MemorySegment x1) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$0,"vfprintf");
    }
    /**
     * {@snippet :
     * int vfprintf(FILE*, char*, va_list);
     * }
     */
    public static int vfprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$1,"vprintf");
    }
    /**
     * {@snippet :
     * int vprintf(char*, va_list);
     * }
     */
    public static int vprintf(MemorySegment x0, MemorySegment x1) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$2,"vsprintf");
    }
    /**
     * {@snippet :
     * int vsprintf(char*, char*, va_list);
     * }
     */
    public static int vsprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$3,"ctermid");
    }
    /**
     * {@snippet :
     * char* ctermid(char*);
     * }
     */
    public static MemorySegment ctermid(MemorySegment x0) {
        var mh$ = ctermid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$34.const$5,"fdopen");
    }
    /**
     * {@snippet :
     * FILE* fdopen(int, char*);
     * }
     */
    public static MemorySegment fdopen(int x0, MemorySegment x1) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$0,"fileno");
    }
    /**
     * {@snippet :
     * int fileno(FILE*);
     * }
     */
    public static int fileno(MemorySegment x0) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$1,"pclose");
    }
    /**
     * {@snippet :
     * int pclose(FILE*);
     * }
     */
    public static int pclose(MemorySegment x0) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$2,"popen");
    }
    /**
     * {@snippet :
     * FILE* popen(char*, char*);
     * }
     */
    public static MemorySegment popen(MemorySegment x0, MemorySegment x1) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __srget$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$3,"__srget");
    }
    /**
     * {@snippet :
     * int __srget(FILE*);
     * }
     */
    public static int __srget(MemorySegment x0) {
        var mh$ = __srget$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __svfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$4,"__svfscanf");
    }
    /**
     * {@snippet :
     * int __svfscanf(FILE*, char*, va_list);
     * }
     */
    public static int __svfscanf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = __svfscanf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __swbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$35.const$5,"__swbuf");
    }
    /**
     * {@snippet :
     * int __swbuf(int, FILE*);
     * }
     */
    public static int __swbuf(int x0, MemorySegment x1) {
        var mh$ = __swbuf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$0,"flockfile");
    }
    /**
     * {@snippet :
     * void flockfile(FILE*);
     * }
     */
    public static void flockfile(MemorySegment x0) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$1,"ftrylockfile");
    }
    /**
     * {@snippet :
     * int ftrylockfile(FILE*);
     * }
     */
    public static int ftrylockfile(MemorySegment x0) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$2,"funlockfile");
    }
    /**
     * {@snippet :
     * void funlockfile(FILE*);
     * }
     */
    public static void funlockfile(MemorySegment x0) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$3,"getc_unlocked");
    }
    /**
     * {@snippet :
     * int getc_unlocked(FILE*);
     * }
     */
    public static int getc_unlocked(MemorySegment x0) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$4,"getchar_unlocked");
    }
    /**
     * {@snippet :
     * int getchar_unlocked();
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$36.const$5,"putc_unlocked");
    }
    /**
     * {@snippet :
     * int putc_unlocked(int, FILE*);
     * }
     */
    public static int putc_unlocked(int x0, MemorySegment x1) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$0,"putchar_unlocked");
    }
    /**
     * {@snippet :
     * int putchar_unlocked(int);
     * }
     */
    public static int putchar_unlocked(int x0) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$1,"getw");
    }
    /**
     * {@snippet :
     * int getw(FILE*);
     * }
     */
    public static int getw(MemorySegment x0) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$2,"putw");
    }
    /**
     * {@snippet :
     * int putw(int, FILE*);
     * }
     */
    public static int putw(int x0, MemorySegment x1) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$3,"tempnam");
    }
    /**
     * {@snippet :
     * char* tempnam(char* __dir, char* __prefix);
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __prefix) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dir, __prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$4,"fseeko");
    }
    /**
     * {@snippet :
     * int fseeko(FILE* __stream, off_t __offset, int __whence);
     * }
     */
    public static int fseeko(MemorySegment __stream, long __offset, int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __offset, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$37.const$5,"ftello");
    }
    /**
     * {@snippet :
     * off_t ftello(FILE* __stream);
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$1,"snprintf");
    }
    /**
     * {@snippet :
     * int snprintf(char* __str, size_t __size, char* __format,...);
     * }
     */
    public static int snprintf(MemorySegment __str, long __size, MemorySegment __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$2,"vfscanf");
    }
    /**
     * {@snippet :
     * int vfscanf(FILE* __stream, char* __format, va_list);
     * }
     */
    public static int vfscanf(MemorySegment __stream, MemorySegment __format, MemorySegment x2) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$3,"vscanf");
    }
    /**
     * {@snippet :
     * int vscanf(char* __format, va_list);
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment x1) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$38.const$5,"vsnprintf");
    }
    /**
     * {@snippet :
     * int vsnprintf(char* __str, size_t __size, char* __format, va_list);
     * }
     */
    public static int vsnprintf(MemorySegment __str, long __size, MemorySegment __format, MemorySegment x3) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__str, __size, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$0,"vsscanf");
    }
    /**
     * {@snippet :
     * int vsscanf(char* __str, char* __format, va_list);
     * }
     */
    public static int vsscanf(MemorySegment __str, MemorySegment __format, MemorySegment x2) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__str, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = JAVA_LONG;
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$1,"dprintf");
    }
    /**
     * {@snippet :
     * int dprintf(int, char*,...);
     * }
     */
    public static int dprintf(int x0, MemorySegment x1, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$2,"vdprintf");
    }
    /**
     * {@snippet :
     * int vdprintf(int, char*, va_list);
     * }
     */
    public static int vdprintf(int x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$4,"getdelim");
    }
    /**
     * {@snippet :
     * ssize_t getdelim(char** __linep, size_t* __linecapp, int __delimiter, FILE* __stream);
     * }
     */
    public static long getdelim(MemorySegment __linep, MemorySegment __linecapp, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__linep, __linecapp, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$39.const$6,"getline");
    }
    /**
     * {@snippet :
     * ssize_t getline(char** __linep, size_t* __linecapp, FILE* __stream);
     * }
     */
    public static long getline(MemorySegment __linep, MemorySegment __linecapp, MemorySegment __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__linep, __linecapp, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$1,"fmemopen");
    }
    /**
     * {@snippet :
     * FILE* fmemopen(void* __buf, size_t __size, char* __mode);
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __buf, long __size, MemorySegment __mode) {
        var mh$ = fmemopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__buf, __size, __mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$2,"open_memstream");
    }
    /**
     * {@snippet :
     * FILE* open_memstream(char** __bufp, size_t* __sizep);
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufp, MemorySegment __sizep) {
        var mh$ = open_memstream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__bufp, __sizep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout sys_nerr$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle sys_nerr$VH() {
        return constants$40.const$3;
    }
    public static MemorySegment sys_nerr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$40.const$4,"sys_nerr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int sys_nerr;
     * }
     */
    public static int sys_nerr$get() {
        return (int) constants$40.const$3.get(RuntimeHelper.requireNonNull(constants$40.const$4, "sys_nerr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int sys_nerr;
     * }
     */
    public static void sys_nerr$set(int x) {
        constants$40.const$3.set(RuntimeHelper.requireNonNull(constants$40.const$4, "sys_nerr"), x);
    }
    public static MethodHandle asprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$40.const$5,"asprintf");
    }
    /**
     * {@snippet :
     * int asprintf(char**, char*,...);
     * }
     */
    public static int asprintf(MemorySegment x0, MemorySegment x1, Object... x2) {
        var mh$ = asprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid_r$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$0,"ctermid_r");
    }
    /**
     * {@snippet :
     * char* ctermid_r(char*);
     * }
     */
    public static MemorySegment ctermid_r(MemorySegment x0) {
        var mh$ = ctermid_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetln$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$1,"fgetln");
    }
    /**
     * {@snippet :
     * char* fgetln(FILE*, size_t*);
     * }
     */
    public static MemorySegment fgetln(MemorySegment x0, MemorySegment x1) {
        var mh$ = fgetln$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmtcheck$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$2,"fmtcheck");
    }
    /**
     * {@snippet :
     * char* fmtcheck(char*, char*);
     * }
     */
    public static MemorySegment fmtcheck(MemorySegment x0, MemorySegment x1) {
        var mh$ = fmtcheck$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpurge$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$3,"fpurge");
    }
    /**
     * {@snippet :
     * int fpurge(FILE*);
     * }
     */
    public static int fpurge(MemorySegment x0) {
        var mh$ = fpurge$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$41.const$5,"setbuffer");
    }
    /**
     * {@snippet :
     * void setbuffer(FILE*, char*, int);
     * }
     */
    public static void setbuffer(MemorySegment x0, MemorySegment x1, int x2) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$0,"setlinebuf");
    }
    /**
     * {@snippet :
     * int setlinebuf(FILE*);
     * }
     */
    public static int setlinebuf(MemorySegment x0) {
        var mh$ = setlinebuf$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vasprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.const$1,"vasprintf");
    }
    /**
     * {@snippet :
     * int vasprintf(char**, char*, va_list);
     * }
     */
    public static int vasprintf(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = vasprintf$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funopen$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$1,"funopen");
    }
    /**
     * {@snippet :
     * FILE* funopen(void*, int (*)(void*,char*,int), int (*)(void*,char*,int), fpos_t (*)(void*,fpos_t,int), int (*)(void*));
     * }
     */
    public static MemorySegment funopen(MemorySegment x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = funopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$3,"__sprintf_chk");
    }
    /**
     * {@snippet :
     * int __sprintf_chk(char*, int, size_t, char*,...);
     * }
     */
    public static int __sprintf_chk(MemorySegment x0, int x1, long x2, MemorySegment x3, Object... x4) {
        var mh$ = __sprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __snprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$43.const$5,"__snprintf_chk");
    }
    /**
     * {@snippet :
     * int __snprintf_chk(char*, size_t, int, size_t, char*,...);
     * }
     */
    public static int __snprintf_chk(MemorySegment x0, long x1, int x2, long x3, MemorySegment x4, Object... x5) {
        var mh$ = __snprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __vsprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$1,"__vsprintf_chk");
    }
    /**
     * {@snippet :
     * int __vsprintf_chk(char*, int, size_t, char*, va_list);
     * }
     */
    public static int __vsprintf_chk(MemorySegment x0, int x1, long x2, MemorySegment x3, MemorySegment x4) {
        var mh$ = __vsprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __vsnprintf_chk$MH() {
        return RuntimeHelper.requireNonNull(constants$44.const$3,"__vsnprintf_chk");
    }
    /**
     * {@snippet :
     * int __vsnprintf_chk(char*, size_t, int, size_t, char*, va_list);
     * }
     */
    public static int __vsnprintf_chk(MemorySegment x0, long x1, int x2, long x3, MemorySegment x4, MemorySegment x5) {
        var mh$ = __vsnprintf_chk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long clock_t;
     * }
     */
    public static final OfLong clock_t = JAVA_LONG;
    public static MemoryLayout getdate_err$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle getdate_err$VH() {
        return constants$40.const$3;
    }
    public static MemorySegment getdate_err$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$46.const$4,"getdate_err");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int getdate_err;
     * }
     */
    public static int getdate_err$get() {
        return (int) constants$40.const$3.get(RuntimeHelper.requireNonNull(constants$46.const$4, "getdate_err"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int getdate_err;
     * }
     */
    public static void getdate_err$set(int x) {
        constants$40.const$3.set(RuntimeHelper.requireNonNull(constants$46.const$4, "getdate_err"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return JAVA_LONG;
    }
    public static VarHandle timezone$VH() {
        return constants$46.const$5;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$47.const$0,"timezone");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * long timezone;
     * }
     */
    public static long timezone$get() {
        return (long) constants$46.const$5.get(RuntimeHelper.requireNonNull(constants$47.const$0, "timezone"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * long timezone;
     * }
     */
    public static void timezone$set(long x) {
        constants$46.const$5.set(RuntimeHelper.requireNonNull(constants$47.const$0, "timezone"), x);
    }
    public static MemoryLayout daylight$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle daylight$VH() {
        return constants$40.const$3;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$47.const$1,"daylight");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int daylight;
     * }
     */
    public static int daylight$get() {
        return (int) constants$40.const$3.get(RuntimeHelper.requireNonNull(constants$47.const$1, "daylight"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int daylight;
     * }
     */
    public static void daylight$set(int x) {
        constants$40.const$3.set(RuntimeHelper.requireNonNull(constants$47.const$1, "daylight"), x);
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$2,"asctime");
    }
    /**
     * {@snippet :
     * char* asctime(struct tm*);
     * }
     */
    public static MemorySegment asctime(MemorySegment x0) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$4,"clock");
    }
    /**
     * {@snippet :
     * clock_t clock();
     * }
     */
    public static long clock() {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$47.const$5,"ctime");
    }
    /**
     * {@snippet :
     * char* ctime(const time_t*);
     * }
     */
    public static MemorySegment ctime(MemorySegment x0) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$1,"difftime");
    }
    /**
     * {@snippet :
     * double difftime(time_t, time_t);
     * }
     */
    public static double difftime(long x0, long x1) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdate$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$2,"getdate");
    }
    /**
     * {@snippet :
     * struct tm* getdate(char*);
     * }
     */
    public static MemorySegment getdate(MemorySegment x0) {
        var mh$ = getdate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$3,"gmtime");
    }
    /**
     * {@snippet :
     * struct tm* gmtime(const time_t*);
     * }
     */
    public static MemorySegment gmtime(MemorySegment x0) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$4,"localtime");
    }
    /**
     * {@snippet :
     * struct tm* localtime(const time_t*);
     * }
     */
    public static MemorySegment localtime(MemorySegment x0) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$48.const$5,"mktime");
    }
    /**
     * {@snippet :
     * time_t mktime(struct tm*);
     * }
     */
    public static long mktime(MemorySegment x0) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$1,"strftime");
    }
    /**
     * {@snippet :
     * size_t strftime(char*, size_t, char*, struct tm*);
     * }
     */
    public static long strftime(MemorySegment x0, long x1, MemorySegment x2, MemorySegment x3) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strptime$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$2,"strptime");
    }
    /**
     * {@snippet :
     * char* strptime(char*, char*, struct tm*);
     * }
     */
    public static MemorySegment strptime(MemorySegment x0, MemorySegment x1, MemorySegment x2) {
        var mh$ = strptime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$3,"time");
    }
    /**
     * {@snippet :
     * time_t time(time_t*);
     * }
     */
    public static long time(MemorySegment x0) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$49.const$5,"tzset");
    }
    /**
     * {@snippet :
     * void tzset();
     * }
     */
    public static void tzset() {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$0,"asctime_r");
    }
    /**
     * {@snippet :
     * char* asctime_r(struct tm*, char*);
     * }
     */
    public static MemorySegment asctime_r(MemorySegment x0, MemorySegment x1) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$1,"ctime_r");
    }
    /**
     * {@snippet :
     * char* ctime_r(const time_t*, char*);
     * }
     */
    public static MemorySegment ctime_r(MemorySegment x0, MemorySegment x1) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$2,"gmtime_r");
    }
    /**
     * {@snippet :
     * struct tm* gmtime_r(const time_t*, struct tm*);
     * }
     */
    public static MemorySegment gmtime_r(MemorySegment x0, MemorySegment x1) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$3,"localtime_r");
    }
    /**
     * {@snippet :
     * struct tm* localtime_r(const time_t*, struct tm*);
     * }
     */
    public static MemorySegment localtime_r(MemorySegment x0, MemorySegment x1) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix2time$MH() {
        return RuntimeHelper.requireNonNull(constants$50.const$5,"posix2time");
    }
    /**
     * {@snippet :
     * time_t posix2time(time_t);
     * }
     */
    public static long posix2time(long x0) {
        var mh$ = posix2time$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tzsetwall$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$0,"tzsetwall");
    }
    /**
     * {@snippet :
     * void tzsetwall();
     * }
     */
    public static void tzsetwall() {
        var mh$ = tzsetwall$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time2posix$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$1,"time2posix");
    }
    /**
     * {@snippet :
     * time_t time2posix(time_t);
     * }
     */
    public static long time2posix(long x0) {
        var mh$ = time2posix$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$2,"timelocal");
    }
    /**
     * {@snippet :
     * time_t timelocal(struct tm*);
     * }
     */
    public static long timelocal(MemorySegment x0) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$3,"timegm");
    }
    /**
     * {@snippet :
     * time_t timegm(struct tm*);
     * }
     */
    public static long timegm(MemorySegment x0) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$4,"nanosleep");
    }
    /**
     * {@snippet :
     * int nanosleep(struct timespec* __rqtp, struct timespec* __rmtp);
     * }
     */
    public static int nanosleep(MemorySegment __rqtp, MemorySegment __rmtp) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__rqtp, __rmtp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ._CLOCK_REALTIME = 0;
     * }
     */
    public static int _CLOCK_REALTIME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum ._CLOCK_MONOTONIC = 6;
     * }
     */
    public static int _CLOCK_MONOTONIC() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum ._CLOCK_MONOTONIC_RAW = 4;
     * }
     */
    public static int _CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ._CLOCK_MONOTONIC_RAW_APPROX = 5;
     * }
     */
    public static int _CLOCK_MONOTONIC_RAW_APPROX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum ._CLOCK_UPTIME_RAW = 8;
     * }
     */
    public static int _CLOCK_UPTIME_RAW() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum ._CLOCK_UPTIME_RAW_APPROX = 9;
     * }
     */
    public static int _CLOCK_UPTIME_RAW_APPROX() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum ._CLOCK_PROCESS_CPUTIME_ID = 12;
     * }
     */
    public static int _CLOCK_PROCESS_CPUTIME_ID() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum ._CLOCK_THREAD_CPUTIME_ID = 16;
     * }
     */
    public static int _CLOCK_THREAD_CPUTIME_ID() {
        return (int)16L;
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$51.const$5,"clock_getres");
    }
    /**
     * {@snippet :
     * int clock_getres(clockid_t __clock_id, struct timespec* __res);
     * }
     */
    public static int clock_getres(int __clock_id, MemorySegment __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$0,"clock_gettime");
    }
    /**
     * {@snippet :
     * int clock_gettime(clockid_t __clock_id, struct timespec* __tp);
     * }
     */
    public static int clock_gettime(int __clock_id, MemorySegment __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime_nsec_np$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$2,"clock_gettime_nsec_np");
    }
    /**
     * {@snippet :
     * __uint64_t clock_gettime_nsec_np(clockid_t __clock_id);
     * }
     */
    public static long clock_gettime_nsec_np(int __clock_id) {
        var mh$ = clock_gettime_nsec_np$MH();
        try {
            return (long)mh$.invokeExact(__clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$3,"clock_settime");
    }
    /**
     * {@snippet :
     * int clock_settime(clockid_t __clock_id, struct timespec* __tp);
     * }
     */
    public static int clock_settime(int __clock_id, MemorySegment __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$4,"timespec_get");
    }
    /**
     * {@snippet :
     * int timespec_get(struct timespec* ts, int base);
     * }
     */
    public static int timespec_get(MemorySegment ts, int base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(ts, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint64_t;
     * }
     */
    public static final OfLong uint64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef short int_fast16_t;
     * }
     */
    public static final OfShort int_fast16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef int int_fast32_t;
     * }
     */
    public static final OfInt int_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef long long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = JAVA_BYTE;
    /**
     * {@snippet :
     * typedef unsigned short uint_fast16_t;
     * }
     */
    public static final OfShort uint_fast16_t = JAVA_SHORT;
    /**
     * {@snippet :
     * typedef unsigned int uint_fast32_t;
     * }
     */
    public static final OfInt uint_fast32_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned long long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = JAVA_LONG;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = JAVA_LONG;
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$52.const$5,"imaxabs");
    }
    /**
     * {@snippet :
     * intmax_t imaxabs(intmax_t j);
     * }
     */
    public static long imaxabs(long j) {
        var mh$ = imaxabs$MH();
        try {
            return (long)mh$.invokeExact(j);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$4,"imaxdiv");
    }
    /**
     * {@snippet :
     * imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom);
     * }
     */
    public static MemorySegment imaxdiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = imaxdiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$53.const$6,"strtoimax");
    }
    /**
     * {@snippet :
     * intmax_t strtoimax(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoimax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$0,"strtoumax");
    }
    /**
     * {@snippet :
     * uintmax_t strtoumax(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoumax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$1,"wcstoimax");
    }
    /**
     * {@snippet :
     * intmax_t wcstoimax(const wchar_t* __nptr, wchar_t** __endptr, int __base);
     * }
     */
    public static long wcstoimax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = wcstoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$54.const$2,"wcstoumax");
    }
    /**
     * {@snippet :
     * uintmax_t wcstoumax(const wchar_t* __nptr, wchar_t** __endptr, int __base);
     * }
     */
    public static long wcstoumax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = wcstoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getattrlistbulk$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$1,"getattrlistbulk");
    }
    /**
     * {@snippet :
     * int getattrlistbulk(int, void*, void*, size_t, uint64_t);
     * }
     */
    public static int getattrlistbulk(int x0, MemorySegment x1, MemorySegment x2, long x3, long x4) {
        var mh$ = getattrlistbulk$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getattrlistat$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$3,"getattrlistat");
    }
    /**
     * {@snippet :
     * int getattrlistat(int, char*, void*, void*, size_t, unsigned long);
     * }
     */
    public static int getattrlistat(int x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, long x5) {
        var mh$ = getattrlistat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setattrlistat$MH() {
        return RuntimeHelper.requireNonNull(constants$55.const$5,"setattrlistat");
    }
    /**
     * {@snippet :
     * int setattrlistat(int, char*, void*, void*, size_t, uint32_t);
     * }
     */
    public static int setattrlistat(int x0, MemorySegment x1, MemorySegment x2, MemorySegment x3, long x4, int x5) {
        var mh$ = setattrlistat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4, x5);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freadlink$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$1,"freadlink");
    }
    /**
     * {@snippet :
     * ssize_t freadlink(int, char*, size_t);
     * }
     */
    public static long freadlink(int x0, MemorySegment x1, long x2) {
        var mh$ = freadlink$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle faccessat$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$3,"faccessat");
    }
    /**
     * {@snippet :
     * int faccessat(int, char*, int, int);
     * }
     */
    public static int faccessat(int x0, MemorySegment x1, int x2, int x3) {
        var mh$ = faccessat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fchownat$MH() {
        return RuntimeHelper.requireNonNull(constants$56.const$5,"fchownat");
    }
    /**
     * {@snippet :
     * int fchownat(int, char*, uid_t, gid_t, int);
     * }
     */
    public static int fchownat(int x0, MemorySegment x1, int x2, int x3, int x4) {
        var mh$ = fchownat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle linkat$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$0,"linkat");
    }
    /**
     * {@snippet :
     * int linkat(int, char*, int, char*, int);
     * }
     */
    public static int linkat(int x0, MemorySegment x1, int x2, MemorySegment x3, int x4) {
        var mh$ = linkat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2, x3, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle readlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$2,"readlinkat");
    }
    /**
     * {@snippet :
     * ssize_t readlinkat(int, char*, char*, size_t);
     * }
     */
    public static long readlinkat(int x0, MemorySegment x1, MemorySegment x2, long x3) {
        var mh$ = readlinkat$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle symlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$4,"symlinkat");
    }
    /**
     * {@snippet :
     * int symlinkat(char*, int, char*);
     * }
     */
    public static int symlinkat(MemorySegment x0, int x1, MemorySegment x2) {
        var mh$ = symlinkat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unlinkat$MH() {
        return RuntimeHelper.requireNonNull(constants$57.const$6,"unlinkat");
    }
    /**
     * {@snippet :
     * int unlinkat(int, char*, int);
     * }
     */
    public static int unlinkat(int x0, MemorySegment x1, int x2) {
        var mh$ = unlinkat$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = JAVA_INT;
    /**
     * {@snippet :
     * typedef unsigned int useconds_t;
     * }
     */
    public static final OfInt useconds_t = JAVA_INT;
    public static MethodHandle _exit$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$1,"_exit");
    }
    /**
     * {@snippet :
     * void _exit(int);
     * }
     */
    public static void _exit(int x0) {
        var mh$ = _exit$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle access$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$2,"access");
    }
    /**
     * {@snippet :
     * int access(char*, int);
     * }
     */
    public static int access(MemorySegment x0, int x1) {
        var mh$ = access$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alarm$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$3,"alarm");
    }
    /**
     * {@snippet :
     * unsigned int alarm(unsigned int);
     * }
     */
    public static int alarm(int x0) {
        var mh$ = alarm$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chdir$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$4,"chdir");
    }
    /**
     * {@snippet :
     * int chdir(char*);
     * }
     */
    public static int chdir(MemorySegment x0) {
        var mh$ = chdir$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle chown$MH() {
        return RuntimeHelper.requireNonNull(constants$58.const$6,"chown");
    }
    /**
     * {@snippet :
     * int chown(char*, uid_t, gid_t);
     * }
     */
    public static int chown(MemorySegment x0, int x1, int x2) {
        var mh$ = chown$MH();
        try {
            return (int)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle close$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$0,"close");
    }
    /**
     * {@snippet :
     * int close(int);
     * }
     */
    public static int close(int x0) {
        var mh$ = close$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$1,"dup");
    }
    /**
     * {@snippet :
     * int dup(int);
     * }
     */
    public static int dup(int x0) {
        var mh$ = dup$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dup2$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$2,"dup2");
    }
    /**
     * {@snippet :
     * int dup2(int, int);
     * }
     */
    public static int dup2(int x0, int x1) {
        var mh$ = dup2$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execl$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$3,"execl");
    }
    /**
     * {@snippet :
     * int execl(char* __path, char* __arg0,...);
     * }
     */
    public static int execl(MemorySegment __path, MemorySegment __arg0, Object... x2) {
        var mh$ = execl$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg0, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execle$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$4,"execle");
    }
    /**
     * {@snippet :
     * int execle(char* __path, char* __arg0,...);
     * }
     */
    public static int execle(MemorySegment __path, MemorySegment __arg0, Object... x2) {
        var mh$ = execle$MH();
        try {
            return (int)mh$.invokeExact(__path, __arg0, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execlp$MH() {
        return RuntimeHelper.requireNonNull(constants$59.const$5,"execlp");
    }
    /**
     * {@snippet :
     * int execlp(char* __file, char* __arg0,...);
     * }
     */
    public static int execlp(MemorySegment __file, MemorySegment __arg0, Object... x2) {
        var mh$ = execlp$MH();
        try {
            return (int)mh$.invokeExact(__file, __arg0, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execv$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$0,"execv");
    }
    /**
     * {@snippet :
     * int execv(char* __path, char** __argv);
     * }
     */
    public static int execv(MemorySegment __path, MemorySegment __argv) {
        var mh$ = execv$MH();
        try {
            return (int)mh$.invokeExact(__path, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execve$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$1,"execve");
    }
    /**
     * {@snippet :
     * int execve(char* __file, char** __argv, char** __envp);
     * }
     */
    public static int execve(MemorySegment __file, MemorySegment __argv, MemorySegment __envp) {
        var mh$ = execve$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv, __envp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle execvp$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$2,"execvp");
    }
    /**
     * {@snippet :
     * int execvp(char* __file, char** __argv);
     * }
     */
    public static int execvp(MemorySegment __file, MemorySegment __argv) {
        var mh$ = execvp$MH();
        try {
            return (int)mh$.invokeExact(__file, __argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fork$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$3,"fork");
    }
    /**
     * {@snippet :
     * pid_t fork();
     * }
     */
    public static int fork() {
        var mh$ = fork$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fpathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$60.const$5,"fpathconf");
    }
    /**
     * {@snippet :
     * long fpathconf(int, int);
     * }
     */
    public static long fpathconf(int x0, int x1) {
        var mh$ = fpathconf$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getcwd$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$1,"getcwd");
    }
    /**
     * {@snippet :
     * char* getcwd(char*, size_t);
     * }
     */
    public static MemorySegment getcwd(MemorySegment x0, long x1) {
        var mh$ = getcwd$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getegid$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$2,"getegid");
    }
    /**
     * {@snippet :
     * gid_t getegid();
     * }
     */
    public static int getegid() {
        var mh$ = getegid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle geteuid$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$3,"geteuid");
    }
    /**
     * {@snippet :
     * uid_t geteuid();
     * }
     */
    public static int geteuid() {
        var mh$ = geteuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgid$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$4,"getgid");
    }
    /**
     * {@snippet :
     * gid_t getgid();
     * }
     */
    public static int getgid() {
        var mh$ = getgid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getgroups$MH() {
        return RuntimeHelper.requireNonNull(constants$61.const$5,"getgroups");
    }
    /**
     * {@snippet :
     * int getgroups(int, gid_t []);
     * }
     */
    public static int getgroups(int x0, MemorySegment x1) {
        var mh$ = getgroups$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getlogin$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$0,"getlogin");
    }
    /**
     * {@snippet :
     * char* getlogin();
     * }
     */
    public static MemorySegment getlogin() {
        var mh$ = getlogin$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpgrp$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$1,"getpgrp");
    }
    /**
     * {@snippet :
     * pid_t getpgrp();
     * }
     */
    public static int getpgrp() {
        var mh$ = getpgrp$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getpid$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$2,"getpid");
    }
    /**
     * {@snippet :
     * pid_t getpid();
     * }
     */
    public static int getpid() {
        var mh$ = getpid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getppid$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$3,"getppid");
    }
    /**
     * {@snippet :
     * pid_t getppid();
     * }
     */
    public static int getppid() {
        var mh$ = getppid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getuid$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$4,"getuid");
    }
    /**
     * {@snippet :
     * uid_t getuid();
     * }
     */
    public static int getuid() {
        var mh$ = getuid$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isatty$MH() {
        return RuntimeHelper.requireNonNull(constants$62.const$5,"isatty");
    }
    /**
     * {@snippet :
     * int isatty(int);
     * }
     */
    public static int isatty(int x0) {
        var mh$ = isatty$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle link$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$0,"link");
    }
    /**
     * {@snippet :
     * int link(char*, char*);
     * }
     */
    public static int link(MemorySegment x0, MemorySegment x1) {
        var mh$ = link$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lseek$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$2,"lseek");
    }
    /**
     * {@snippet :
     * off_t lseek(int, off_t, int);
     * }
     */
    public static long lseek(int x0, long x1, int x2) {
        var mh$ = lseek$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pathconf$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$4,"pathconf");
    }
    /**
     * {@snippet :
     * long pathconf(char*, int);
     * }
     */
    public static long pathconf(MemorySegment x0, int x1) {
        var mh$ = pathconf$MH();
        try {
            return (long)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pause$MH() {
        return RuntimeHelper.requireNonNull(constants$63.const$5,"pause");
    }
    /**
     * {@snippet :
     * int pause();
     * }
     */
    public static int pause() {
        var mh$ = pause$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pipe$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$0,"pipe");
    }
    /**
     * {@snippet :
     * int pipe(int [2]);
     * }
     */
    public static int pipe(MemorySegment x0) {
        var mh$ = pipe$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle read$MH() {
        return RuntimeHelper.requireNonNull(constants$64.const$1,"read");
    }
    /**
     * {@snippet :
     * ssize_t read(int, void*, size_t);
     * }
     */
    public static long read(int x0, MemorySegment x1, long x2) {
        var mh$ = read$MH();
        try {
            return (long)mh$.invokeExact(x0, x1, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


