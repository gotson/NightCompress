// Generated by jextract

package com.github.gotson.nightcompress.panama;

import java.lang.foreign.*;

/**
 * {@snippet :
 * void (*archive_read_disk_set_matching$_excluded_func)(struct archive*,void*,struct archive_entry*);
 * }
 */
public interface archive_read_disk_set_matching$_excluded_func {

    void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
    static MemorySegment allocate(archive_read_disk_set_matching$_excluded_func fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$133.const$3, fi, constants$112.const$5, scope);
    }
    static archive_read_disk_set_matching$_excluded_func ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
            try {
                constants$133.const$4.invokeExact(symbol, __x0, __x1, __x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


