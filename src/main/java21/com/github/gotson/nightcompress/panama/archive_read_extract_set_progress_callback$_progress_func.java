// Generated by jextract

package com.github.gotson.nightcompress.panama;

import java.lang.foreign.*;

/**
 * {@snippet :
 * void (*archive_read_extract_set_progress_callback$_progress_func)(void*);
 * }
 */
public interface archive_read_extract_set_progress_callback$_progress_func {

    void apply(java.lang.foreign.MemorySegment _x0);
    static MemorySegment allocate(archive_read_extract_set_progress_callback$_progress_func fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$112.const$4, fi, constants$0.const$3, scope);
    }
    static archive_read_extract_set_progress_callback$_progress_func ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment __x0) -> {
            try {
                constants$0.const$5.invokeExact(symbol, __x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


