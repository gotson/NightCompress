// Generated by jextract

package com.github.gotson.nightcompress.panama;

import java.lang.foreign.*;

/**
 * {@snippet :
 * long long (*archive_skip_callback)(struct archive*,void* _client_data,long long request);
 * }
 */
public interface archive_skip_callback {

    long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _client_data, long request);
    static MemorySegment allocate(archive_skip_callback fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$93.const$0, fi, constants$74.const$1, scope);
    }
    static archive_skip_callback ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __client_data, long _request) -> {
            try {
                return (long)constants$93.const$1.invokeExact(symbol, __x0, __client_data, _request);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


