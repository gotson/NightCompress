// Generated by jextract

package com.github.gotson.nightcompress.panama;

import java.lang.foreign.*;

/**
 * {@snippet :
 * fpos_t (*funopen$x2)(void*,fpos_t,int);
 * }
 */
public interface funopen$x2 {

    long apply(java.lang.foreign.MemorySegment _x0, long _x1, int _x2);
    static MemorySegment allocate(funopen$x2 fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$42.const$4, fi, constants$23.const$3, scope);
    }
    static funopen$x2 ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment __x0, long __x1, int __x2) -> {
            try {
                return (long)constants$23.const$5.invokeExact(symbol, __x0, __x1, __x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


