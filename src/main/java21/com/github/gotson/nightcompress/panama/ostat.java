// Generated by jextract

package com.github.gotson.nightcompress.panama;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct ostat {
 *     __uint16_t st_dev;
 *     ino_t st_ino;
 *     mode_t st_mode;
 *     nlink_t st_nlink;
 *     __uint16_t st_uid;
 *     __uint16_t st_gid;
 *     __uint16_t st_rdev;
 *     __int32_t st_size;
 *     struct timespec st_atimespec;
 *     struct timespec st_mtimespec;
 *     struct timespec st_ctimespec;
 *     __int32_t st_blksize;
 *     __int32_t st_blocks;
 *     __uint32_t st_flags;
 *     __uint32_t st_gen;
 * };
 * }
 */
public class ostat {

    public static MemoryLayout $LAYOUT() {
        return constants$5.const$1;
    }
    public static VarHandle st_dev$VH() {
        return constants$5.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __uint16_t st_dev;
     * }
     */
    public static short st_dev$get(MemorySegment seg) {
        return (short)constants$5.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __uint16_t st_dev;
     * }
     */
    public static void st_dev$set(MemorySegment seg, short x) {
        constants$5.const$2.set(seg, x);
    }
    public static short st_dev$get(MemorySegment seg, long index) {
        return (short)constants$5.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void st_dev$set(MemorySegment seg, long index, short x) {
        constants$5.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle st_ino$VH() {
        return constants$5.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * ino_t st_ino;
     * }
     */
    public static long st_ino$get(MemorySegment seg) {
        return (long)constants$5.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * ino_t st_ino;
     * }
     */
    public static void st_ino$set(MemorySegment seg, long x) {
        constants$5.const$3.set(seg, x);
    }
    public static long st_ino$get(MemorySegment seg, long index) {
        return (long)constants$5.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void st_ino$set(MemorySegment seg, long index, long x) {
        constants$5.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle st_mode$VH() {
        return constants$5.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * mode_t st_mode;
     * }
     */
    public static short st_mode$get(MemorySegment seg) {
        return (short)constants$5.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * mode_t st_mode;
     * }
     */
    public static void st_mode$set(MemorySegment seg, short x) {
        constants$5.const$4.set(seg, x);
    }
    public static short st_mode$get(MemorySegment seg, long index) {
        return (short)constants$5.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void st_mode$set(MemorySegment seg, long index, short x) {
        constants$5.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle st_nlink$VH() {
        return constants$5.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * nlink_t st_nlink;
     * }
     */
    public static short st_nlink$get(MemorySegment seg) {
        return (short)constants$5.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * nlink_t st_nlink;
     * }
     */
    public static void st_nlink$set(MemorySegment seg, short x) {
        constants$5.const$5.set(seg, x);
    }
    public static short st_nlink$get(MemorySegment seg, long index) {
        return (short)constants$5.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void st_nlink$set(MemorySegment seg, long index, short x) {
        constants$5.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle st_uid$VH() {
        return constants$6.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __uint16_t st_uid;
     * }
     */
    public static short st_uid$get(MemorySegment seg) {
        return (short)constants$6.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __uint16_t st_uid;
     * }
     */
    public static void st_uid$set(MemorySegment seg, short x) {
        constants$6.const$0.set(seg, x);
    }
    public static short st_uid$get(MemorySegment seg, long index) {
        return (short)constants$6.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void st_uid$set(MemorySegment seg, long index, short x) {
        constants$6.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle st_gid$VH() {
        return constants$6.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __uint16_t st_gid;
     * }
     */
    public static short st_gid$get(MemorySegment seg) {
        return (short)constants$6.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __uint16_t st_gid;
     * }
     */
    public static void st_gid$set(MemorySegment seg, short x) {
        constants$6.const$1.set(seg, x);
    }
    public static short st_gid$get(MemorySegment seg, long index) {
        return (short)constants$6.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void st_gid$set(MemorySegment seg, long index, short x) {
        constants$6.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle st_rdev$VH() {
        return constants$6.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __uint16_t st_rdev;
     * }
     */
    public static short st_rdev$get(MemorySegment seg) {
        return (short)constants$6.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __uint16_t st_rdev;
     * }
     */
    public static void st_rdev$set(MemorySegment seg, short x) {
        constants$6.const$2.set(seg, x);
    }
    public static short st_rdev$get(MemorySegment seg, long index) {
        return (short)constants$6.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void st_rdev$set(MemorySegment seg, long index, short x) {
        constants$6.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle st_size$VH() {
        return constants$6.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __int32_t st_size;
     * }
     */
    public static int st_size$get(MemorySegment seg) {
        return (int)constants$6.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __int32_t st_size;
     * }
     */
    public static void st_size$set(MemorySegment seg, int x) {
        constants$6.const$3.set(seg, x);
    }
    public static int st_size$get(MemorySegment seg, long index) {
        return (int)constants$6.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void st_size$set(MemorySegment seg, long index, int x) {
        constants$6.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment st_atimespec$slice(MemorySegment seg) {
        return seg.asSlice(32, 16);
    }
    public static MemorySegment st_mtimespec$slice(MemorySegment seg) {
        return seg.asSlice(48, 16);
    }
    public static MemorySegment st_ctimespec$slice(MemorySegment seg) {
        return seg.asSlice(64, 16);
    }
    public static VarHandle st_blksize$VH() {
        return constants$6.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __int32_t st_blksize;
     * }
     */
    public static int st_blksize$get(MemorySegment seg) {
        return (int)constants$6.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __int32_t st_blksize;
     * }
     */
    public static void st_blksize$set(MemorySegment seg, int x) {
        constants$6.const$4.set(seg, x);
    }
    public static int st_blksize$get(MemorySegment seg, long index) {
        return (int)constants$6.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void st_blksize$set(MemorySegment seg, long index, int x) {
        constants$6.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle st_blocks$VH() {
        return constants$6.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __int32_t st_blocks;
     * }
     */
    public static int st_blocks$get(MemorySegment seg) {
        return (int)constants$6.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __int32_t st_blocks;
     * }
     */
    public static void st_blocks$set(MemorySegment seg, int x) {
        constants$6.const$5.set(seg, x);
    }
    public static int st_blocks$get(MemorySegment seg, long index) {
        return (int)constants$6.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void st_blocks$set(MemorySegment seg, long index, int x) {
        constants$6.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle st_flags$VH() {
        return constants$7.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __uint32_t st_flags;
     * }
     */
    public static int st_flags$get(MemorySegment seg) {
        return (int)constants$7.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __uint32_t st_flags;
     * }
     */
    public static void st_flags$set(MemorySegment seg, int x) {
        constants$7.const$0.set(seg, x);
    }
    public static int st_flags$get(MemorySegment seg, long index) {
        return (int)constants$7.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void st_flags$set(MemorySegment seg, long index, int x) {
        constants$7.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle st_gen$VH() {
        return constants$7.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * __uint32_t st_gen;
     * }
     */
    public static int st_gen$get(MemorySegment seg) {
        return (int)constants$7.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * __uint32_t st_gen;
     * }
     */
    public static void st_gen$set(MemorySegment seg, int x) {
        constants$7.const$1.set(seg, x);
    }
    public static int st_gen$get(MemorySegment seg, long index) {
        return (int)constants$7.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void st_gen$set(MemorySegment seg, long index, int x) {
        constants$7.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


